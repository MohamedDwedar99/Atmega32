
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000022f8  0000236c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002c64  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011b6  00000000  00000000  00004fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  0000619a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000134  00000000  00000000  0000629a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000174b  00000000  00000000  000063ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c37  00000000  00000000  00007b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c07  00000000  00000000  00008750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00009358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00009478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000756  00000000  00000000  000096f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009e4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_1>
       8:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_2>
       c:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_3>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_10>
      2c:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_11>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2e 11 	call	0x225c	; 0x225c <main>
      7a:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 11 03 	call	0x622	; 0x622 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 95 03 	call	0x72a	; 0x72a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 95 03 	call	0x72a	; 0x72a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 95 03 	call	0x72a	; 0x72a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__>

00000622 <__gesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gesf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__+0x18>

00000682 <__fixsfsi>:
     682:	ac e0       	ldi	r26, 0x0C	; 12
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x20>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	be 01       	movw	r22, r28
     69c:	6b 5f       	subi	r22, 0xFB	; 251
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__unpack_f>
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	82 30       	cpi	r24, 0x02	; 2
     6a8:	61 f1       	breq	.+88     	; 0x702 <__fixsfsi+0x80>
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	50 f1       	brcs	.+84     	; 0x702 <__fixsfsi+0x80>
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	21 f4       	brne	.+8      	; 0x6ba <__fixsfsi+0x38>
     6b2:	8e 81       	ldd	r24, Y+6	; 0x06
     6b4:	88 23       	and	r24, r24
     6b6:	51 f1       	breq	.+84     	; 0x70c <__fixsfsi+0x8a>
     6b8:	2e c0       	rjmp	.+92     	; 0x716 <__fixsfsi+0x94>
     6ba:	2f 81       	ldd	r18, Y+7	; 0x07
     6bc:	38 85       	ldd	r19, Y+8	; 0x08
     6be:	37 fd       	sbrc	r19, 7
     6c0:	20 c0       	rjmp	.+64     	; 0x702 <__fixsfsi+0x80>
     6c2:	6e 81       	ldd	r22, Y+6	; 0x06
     6c4:	2f 31       	cpi	r18, 0x1F	; 31
     6c6:	31 05       	cpc	r19, r1
     6c8:	1c f0       	brlt	.+6      	; 0x6d0 <__fixsfsi+0x4e>
     6ca:	66 23       	and	r22, r22
     6cc:	f9 f0       	breq	.+62     	; 0x70c <__fixsfsi+0x8a>
     6ce:	23 c0       	rjmp	.+70     	; 0x716 <__fixsfsi+0x94>
     6d0:	8e e1       	ldi	r24, 0x1E	; 30
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	82 1b       	sub	r24, r18
     6d6:	93 0b       	sbc	r25, r19
     6d8:	29 85       	ldd	r18, Y+9	; 0x09
     6da:	3a 85       	ldd	r19, Y+10	; 0x0a
     6dc:	4b 85       	ldd	r20, Y+11	; 0x0b
     6de:	5c 85       	ldd	r21, Y+12	; 0x0c
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__fixsfsi+0x68>
     6e2:	56 95       	lsr	r21
     6e4:	47 95       	ror	r20
     6e6:	37 95       	ror	r19
     6e8:	27 95       	ror	r18
     6ea:	8a 95       	dec	r24
     6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <__fixsfsi+0x60>
     6ee:	66 23       	and	r22, r22
     6f0:	b1 f0       	breq	.+44     	; 0x71e <__fixsfsi+0x9c>
     6f2:	50 95       	com	r21
     6f4:	40 95       	com	r20
     6f6:	30 95       	com	r19
     6f8:	21 95       	neg	r18
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	4f 4f       	sbci	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	0e c0       	rjmp	.+28     	; 0x71e <__fixsfsi+0x9c>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	09 c0       	rjmp	.+18     	; 0x71e <__fixsfsi+0x9c>
     70c:	2f ef       	ldi	r18, 0xFF	; 255
     70e:	3f ef       	ldi	r19, 0xFF	; 255
     710:	4f ef       	ldi	r20, 0xFF	; 255
     712:	5f e7       	ldi	r21, 0x7F	; 127
     714:	04 c0       	rjmp	.+8      	; 0x71e <__fixsfsi+0x9c>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e8       	ldi	r21, 0x80	; 128
     71e:	b9 01       	movw	r22, r18
     720:	ca 01       	movw	r24, r20
     722:	2c 96       	adiw	r28, 0x0c	; 12
     724:	e2 e0       	ldi	r30, 0x02	; 2
     726:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x20>

0000072a <__pack_f>:
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	fc 01       	movw	r30, r24
     736:	e4 80       	ldd	r14, Z+4	; 0x04
     738:	f5 80       	ldd	r15, Z+5	; 0x05
     73a:	06 81       	ldd	r16, Z+6	; 0x06
     73c:	17 81       	ldd	r17, Z+7	; 0x07
     73e:	d1 80       	ldd	r13, Z+1	; 0x01
     740:	80 81       	ld	r24, Z
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	48 f4       	brcc	.+18     	; 0x758 <__pack_f+0x2e>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	a0 e1       	ldi	r26, 0x10	; 16
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e8 2a       	or	r14, r24
     750:	f9 2a       	or	r15, r25
     752:	0a 2b       	or	r16, r26
     754:	1b 2b       	or	r17, r27
     756:	a5 c0       	rjmp	.+330    	; 0x8a2 <__stack+0x43>
     758:	84 30       	cpi	r24, 0x04	; 4
     75a:	09 f4       	brne	.+2      	; 0x75e <__pack_f+0x34>
     75c:	9f c0       	rjmp	.+318    	; 0x89c <__stack+0x3d>
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	21 f4       	brne	.+8      	; 0x76a <__pack_f+0x40>
     762:	ee 24       	eor	r14, r14
     764:	ff 24       	eor	r15, r15
     766:	87 01       	movw	r16, r14
     768:	05 c0       	rjmp	.+10     	; 0x774 <__pack_f+0x4a>
     76a:	e1 14       	cp	r14, r1
     76c:	f1 04       	cpc	r15, r1
     76e:	01 05       	cpc	r16, r1
     770:	11 05       	cpc	r17, r1
     772:	19 f4       	brne	.+6      	; 0x77a <__pack_f+0x50>
     774:	e0 e0       	ldi	r30, 0x00	; 0
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	96 c0       	rjmp	.+300    	; 0x8a6 <__stack+0x47>
     77a:	62 81       	ldd	r22, Z+2	; 0x02
     77c:	73 81       	ldd	r23, Z+3	; 0x03
     77e:	9f ef       	ldi	r25, 0xFF	; 255
     780:	62 38       	cpi	r22, 0x82	; 130
     782:	79 07       	cpc	r23, r25
     784:	0c f0       	brlt	.+2      	; 0x788 <__pack_f+0x5e>
     786:	5b c0       	rjmp	.+182    	; 0x83e <__pack_f+0x114>
     788:	22 e8       	ldi	r18, 0x82	; 130
     78a:	3f ef       	ldi	r19, 0xFF	; 255
     78c:	26 1b       	sub	r18, r22
     78e:	37 0b       	sbc	r19, r23
     790:	2a 31       	cpi	r18, 0x1A	; 26
     792:	31 05       	cpc	r19, r1
     794:	2c f0       	brlt	.+10     	; 0x7a0 <__pack_f+0x76>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	2a c0       	rjmp	.+84     	; 0x7f4 <__pack_f+0xca>
     7a0:	b8 01       	movw	r22, r16
     7a2:	a7 01       	movw	r20, r14
     7a4:	02 2e       	mov	r0, r18
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <__pack_f+0x86>
     7a8:	76 95       	lsr	r23
     7aa:	67 95       	ror	r22
     7ac:	57 95       	ror	r21
     7ae:	47 95       	ror	r20
     7b0:	0a 94       	dec	r0
     7b2:	d2 f7       	brpl	.-12     	; 0x7a8 <__pack_f+0x7e>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__pack_f+0x9c>
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	aa 1f       	adc	r26, r26
     7c4:	bb 1f       	adc	r27, r27
     7c6:	2a 95       	dec	r18
     7c8:	d2 f7       	brpl	.-12     	; 0x7be <__pack_f+0x94>
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	a1 09       	sbc	r26, r1
     7ce:	b1 09       	sbc	r27, r1
     7d0:	8e 21       	and	r24, r14
     7d2:	9f 21       	and	r25, r15
     7d4:	a0 23       	and	r26, r16
     7d6:	b1 23       	and	r27, r17
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	a1 05       	cpc	r26, r1
     7dc:	b1 05       	cpc	r27, r1
     7de:	21 f0       	breq	.+8      	; 0x7e8 <__pack_f+0xbe>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	9a 01       	movw	r18, r20
     7ea:	ab 01       	movw	r20, r22
     7ec:	28 2b       	or	r18, r24
     7ee:	39 2b       	or	r19, r25
     7f0:	4a 2b       	or	r20, r26
     7f2:	5b 2b       	or	r21, r27
     7f4:	da 01       	movw	r26, r20
     7f6:	c9 01       	movw	r24, r18
     7f8:	8f 77       	andi	r24, 0x7F	; 127
     7fa:	90 70       	andi	r25, 0x00	; 0
     7fc:	a0 70       	andi	r26, 0x00	; 0
     7fe:	b0 70       	andi	r27, 0x00	; 0
     800:	80 34       	cpi	r24, 0x40	; 64
     802:	91 05       	cpc	r25, r1
     804:	a1 05       	cpc	r26, r1
     806:	b1 05       	cpc	r27, r1
     808:	39 f4       	brne	.+14     	; 0x818 <__pack_f+0xee>
     80a:	27 ff       	sbrs	r18, 7
     80c:	09 c0       	rjmp	.+18     	; 0x820 <__pack_f+0xf6>
     80e:	20 5c       	subi	r18, 0xC0	; 192
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	4f 4f       	sbci	r20, 0xFF	; 255
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	04 c0       	rjmp	.+8      	; 0x820 <__pack_f+0xf6>
     818:	21 5c       	subi	r18, 0xC1	; 193
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	e0 e0       	ldi	r30, 0x00	; 0
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	3a 07       	cpc	r19, r26
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	4a 07       	cpc	r20, r26
     82e:	a0 e4       	ldi	r26, 0x40	; 64
     830:	5a 07       	cpc	r21, r26
     832:	10 f0       	brcs	.+4      	; 0x838 <__pack_f+0x10e>
     834:	e1 e0       	ldi	r30, 0x01	; 1
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	79 01       	movw	r14, r18
     83a:	8a 01       	movw	r16, r20
     83c:	27 c0       	rjmp	.+78     	; 0x88c <__stack+0x2d>
     83e:	60 38       	cpi	r22, 0x80	; 128
     840:	71 05       	cpc	r23, r1
     842:	64 f5       	brge	.+88     	; 0x89c <__stack+0x3d>
     844:	fb 01       	movw	r30, r22
     846:	e1 58       	subi	r30, 0x81	; 129
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	d8 01       	movw	r26, r16
     84c:	c7 01       	movw	r24, r14
     84e:	8f 77       	andi	r24, 0x7F	; 127
     850:	90 70       	andi	r25, 0x00	; 0
     852:	a0 70       	andi	r26, 0x00	; 0
     854:	b0 70       	andi	r27, 0x00	; 0
     856:	80 34       	cpi	r24, 0x40	; 64
     858:	91 05       	cpc	r25, r1
     85a:	a1 05       	cpc	r26, r1
     85c:	b1 05       	cpc	r27, r1
     85e:	39 f4       	brne	.+14     	; 0x86e <__stack+0xf>
     860:	e7 fe       	sbrs	r14, 7
     862:	0d c0       	rjmp	.+26     	; 0x87e <__stack+0x1f>
     864:	80 e4       	ldi	r24, 0x40	; 64
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	8f e3       	ldi	r24, 0x3F	; 63
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	e8 0e       	add	r14, r24
     878:	f9 1e       	adc	r15, r25
     87a:	0a 1f       	adc	r16, r26
     87c:	1b 1f       	adc	r17, r27
     87e:	17 ff       	sbrs	r17, 7
     880:	05 c0       	rjmp	.+10     	; 0x88c <__stack+0x2d>
     882:	16 95       	lsr	r17
     884:	07 95       	ror	r16
     886:	f7 94       	ror	r15
     888:	e7 94       	ror	r14
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	87 e0       	ldi	r24, 0x07	; 7
     88e:	16 95       	lsr	r17
     890:	07 95       	ror	r16
     892:	f7 94       	ror	r15
     894:	e7 94       	ror	r14
     896:	8a 95       	dec	r24
     898:	d1 f7       	brne	.-12     	; 0x88e <__stack+0x2f>
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <__stack+0x47>
     89c:	ee 24       	eor	r14, r14
     89e:	ff 24       	eor	r15, r15
     8a0:	87 01       	movw	r16, r14
     8a2:	ef ef       	ldi	r30, 0xFF	; 255
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	6e 2f       	mov	r22, r30
     8a8:	67 95       	ror	r22
     8aa:	66 27       	eor	r22, r22
     8ac:	67 95       	ror	r22
     8ae:	90 2f       	mov	r25, r16
     8b0:	9f 77       	andi	r25, 0x7F	; 127
     8b2:	d7 94       	ror	r13
     8b4:	dd 24       	eor	r13, r13
     8b6:	d7 94       	ror	r13
     8b8:	8e 2f       	mov	r24, r30
     8ba:	86 95       	lsr	r24
     8bc:	49 2f       	mov	r20, r25
     8be:	46 2b       	or	r20, r22
     8c0:	58 2f       	mov	r21, r24
     8c2:	5d 29       	or	r21, r13
     8c4:	b7 01       	movw	r22, r14
     8c6:	ca 01       	movw	r24, r20
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	08 95       	ret

000008d4 <__unpack_f>:
     8d4:	fc 01       	movw	r30, r24
     8d6:	db 01       	movw	r26, r22
     8d8:	40 81       	ld	r20, Z
     8da:	51 81       	ldd	r21, Z+1	; 0x01
     8dc:	22 81       	ldd	r18, Z+2	; 0x02
     8de:	62 2f       	mov	r22, r18
     8e0:	6f 77       	andi	r22, 0x7F	; 127
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	22 1f       	adc	r18, r18
     8e6:	22 27       	eor	r18, r18
     8e8:	22 1f       	adc	r18, r18
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	89 2f       	mov	r24, r25
     8ee:	88 0f       	add	r24, r24
     8f0:	82 2b       	or	r24, r18
     8f2:	28 2f       	mov	r18, r24
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	99 1f       	adc	r25, r25
     8f8:	99 27       	eor	r25, r25
     8fa:	99 1f       	adc	r25, r25
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	9c 93       	st	X, r25
     900:	11 97       	sbiw	r26, 0x01	; 1
     902:	21 15       	cp	r18, r1
     904:	31 05       	cpc	r19, r1
     906:	a9 f5       	brne	.+106    	; 0x972 <__unpack_f+0x9e>
     908:	41 15       	cp	r20, r1
     90a:	51 05       	cpc	r21, r1
     90c:	61 05       	cpc	r22, r1
     90e:	71 05       	cpc	r23, r1
     910:	11 f4       	brne	.+4      	; 0x916 <__unpack_f+0x42>
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	37 c0       	rjmp	.+110    	; 0x984 <__unpack_f+0xb0>
     916:	82 e8       	ldi	r24, 0x82	; 130
     918:	9f ef       	ldi	r25, 0xFF	; 255
     91a:	13 96       	adiw	r26, 0x03	; 3
     91c:	9c 93       	st	X, r25
     91e:	8e 93       	st	-X, r24
     920:	12 97       	sbiw	r26, 0x02	; 2
     922:	9a 01       	movw	r18, r20
     924:	ab 01       	movw	r20, r22
     926:	67 e0       	ldi	r22, 0x07	; 7
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	44 1f       	adc	r20, r20
     92e:	55 1f       	adc	r21, r21
     930:	6a 95       	dec	r22
     932:	d1 f7       	brne	.-12     	; 0x928 <__unpack_f+0x54>
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	8c 93       	st	X, r24
     938:	0d c0       	rjmp	.+26     	; 0x954 <__unpack_f+0x80>
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	44 1f       	adc	r20, r20
     940:	55 1f       	adc	r21, r21
     942:	12 96       	adiw	r26, 0x02	; 2
     944:	8d 91       	ld	r24, X+
     946:	9c 91       	ld	r25, X
     948:	13 97       	sbiw	r26, 0x03	; 3
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	13 96       	adiw	r26, 0x03	; 3
     94e:	9c 93       	st	X, r25
     950:	8e 93       	st	-X, r24
     952:	12 97       	sbiw	r26, 0x02	; 2
     954:	20 30       	cpi	r18, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	38 07       	cpc	r19, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	48 07       	cpc	r20, r24
     95e:	80 e4       	ldi	r24, 0x40	; 64
     960:	58 07       	cpc	r21, r24
     962:	58 f3       	brcs	.-42     	; 0x93a <__unpack_f+0x66>
     964:	14 96       	adiw	r26, 0x04	; 4
     966:	2d 93       	st	X+, r18
     968:	3d 93       	st	X+, r19
     96a:	4d 93       	st	X+, r20
     96c:	5c 93       	st	X, r21
     96e:	17 97       	sbiw	r26, 0x07	; 7
     970:	08 95       	ret
     972:	2f 3f       	cpi	r18, 0xFF	; 255
     974:	31 05       	cpc	r19, r1
     976:	79 f4       	brne	.+30     	; 0x996 <__unpack_f+0xc2>
     978:	41 15       	cp	r20, r1
     97a:	51 05       	cpc	r21, r1
     97c:	61 05       	cpc	r22, r1
     97e:	71 05       	cpc	r23, r1
     980:	19 f4       	brne	.+6      	; 0x988 <__unpack_f+0xb4>
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	8c 93       	st	X, r24
     986:	08 95       	ret
     988:	64 ff       	sbrs	r22, 4
     98a:	03 c0       	rjmp	.+6      	; 0x992 <__unpack_f+0xbe>
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	8c 93       	st	X, r24
     990:	12 c0       	rjmp	.+36     	; 0x9b6 <__unpack_f+0xe2>
     992:	1c 92       	st	X, r1
     994:	10 c0       	rjmp	.+32     	; 0x9b6 <__unpack_f+0xe2>
     996:	2f 57       	subi	r18, 0x7F	; 127
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	13 96       	adiw	r26, 0x03	; 3
     99c:	3c 93       	st	X, r19
     99e:	2e 93       	st	-X, r18
     9a0:	12 97       	sbiw	r26, 0x02	; 2
     9a2:	83 e0       	ldi	r24, 0x03	; 3
     9a4:	8c 93       	st	X, r24
     9a6:	87 e0       	ldi	r24, 0x07	; 7
     9a8:	44 0f       	add	r20, r20
     9aa:	55 1f       	adc	r21, r21
     9ac:	66 1f       	adc	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	8a 95       	dec	r24
     9b2:	d1 f7       	brne	.-12     	; 0x9a8 <__unpack_f+0xd4>
     9b4:	70 64       	ori	r23, 0x40	; 64
     9b6:	14 96       	adiw	r26, 0x04	; 4
     9b8:	4d 93       	st	X+, r20
     9ba:	5d 93       	st	X+, r21
     9bc:	6d 93       	st	X+, r22
     9be:	7c 93       	st	X, r23
     9c0:	17 97       	sbiw	r26, 0x07	; 7
     9c2:	08 95       	ret

000009c4 <__fpcmp_parts_f>:
     9c4:	1f 93       	push	r17
     9c6:	dc 01       	movw	r26, r24
     9c8:	fb 01       	movw	r30, r22
     9ca:	9c 91       	ld	r25, X
     9cc:	92 30       	cpi	r25, 0x02	; 2
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__fpcmp_parts_f+0xe>
     9d0:	47 c0       	rjmp	.+142    	; 0xa60 <__fpcmp_parts_f+0x9c>
     9d2:	80 81       	ld	r24, Z
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__fpcmp_parts_f+0x16>
     9d8:	43 c0       	rjmp	.+134    	; 0xa60 <__fpcmp_parts_f+0x9c>
     9da:	94 30       	cpi	r25, 0x04	; 4
     9dc:	51 f4       	brne	.+20     	; 0x9f2 <__fpcmp_parts_f+0x2e>
     9de:	11 96       	adiw	r26, 0x01	; 1
     9e0:	1c 91       	ld	r17, X
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	99 f5       	brne	.+102    	; 0xa4c <__fpcmp_parts_f+0x88>
     9e6:	81 81       	ldd	r24, Z+1	; 0x01
     9e8:	68 2f       	mov	r22, r24
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	61 1b       	sub	r22, r17
     9ee:	71 09       	sbc	r23, r1
     9f0:	3f c0       	rjmp	.+126    	; 0xa70 <__fpcmp_parts_f+0xac>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f0       	breq	.+8      	; 0x9fe <__fpcmp_parts_f+0x3a>
     9f6:	92 30       	cpi	r25, 0x02	; 2
     9f8:	31 f4       	brne	.+12     	; 0xa06 <__fpcmp_parts_f+0x42>
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	b9 f1       	breq	.+110    	; 0xa6c <__fpcmp_parts_f+0xa8>
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	88 23       	and	r24, r24
     a02:	89 f1       	breq	.+98     	; 0xa66 <__fpcmp_parts_f+0xa2>
     a04:	2d c0       	rjmp	.+90     	; 0xa60 <__fpcmp_parts_f+0x9c>
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	1c 91       	ld	r17, X
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	f1 f0       	breq	.+60     	; 0xa4c <__fpcmp_parts_f+0x88>
     a10:	81 81       	ldd	r24, Z+1	; 0x01
     a12:	18 17       	cp	r17, r24
     a14:	d9 f4       	brne	.+54     	; 0xa4c <__fpcmp_parts_f+0x88>
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	2d 91       	ld	r18, X+
     a1a:	3c 91       	ld	r19, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	82 81       	ldd	r24, Z+2	; 0x02
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	94 f0       	brlt	.+36     	; 0xa4c <__fpcmp_parts_f+0x88>
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	bc f0       	brlt	.+46     	; 0xa5c <__fpcmp_parts_f+0x98>
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	8d 91       	ld	r24, X+
     a32:	9d 91       	ld	r25, X+
     a34:	0d 90       	ld	r0, X+
     a36:	bc 91       	ld	r27, X
     a38:	a0 2d       	mov	r26, r0
     a3a:	24 81       	ldd	r18, Z+4	; 0x04
     a3c:	35 81       	ldd	r19, Z+5	; 0x05
     a3e:	46 81       	ldd	r20, Z+6	; 0x06
     a40:	57 81       	ldd	r21, Z+7	; 0x07
     a42:	28 17       	cp	r18, r24
     a44:	39 07       	cpc	r19, r25
     a46:	4a 07       	cpc	r20, r26
     a48:	5b 07       	cpc	r21, r27
     a4a:	18 f4       	brcc	.+6      	; 0xa52 <__fpcmp_parts_f+0x8e>
     a4c:	11 23       	and	r17, r17
     a4e:	41 f0       	breq	.+16     	; 0xa60 <__fpcmp_parts_f+0x9c>
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <__fpcmp_parts_f+0xa2>
     a52:	82 17       	cp	r24, r18
     a54:	93 07       	cpc	r25, r19
     a56:	a4 07       	cpc	r26, r20
     a58:	b5 07       	cpc	r27, r21
     a5a:	40 f4       	brcc	.+16     	; 0xa6c <__fpcmp_parts_f+0xa8>
     a5c:	11 23       	and	r17, r17
     a5e:	19 f0       	breq	.+6      	; 0xa66 <__fpcmp_parts_f+0xa2>
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__fpcmp_parts_f+0xac>
     a66:	6f ef       	ldi	r22, 0xFF	; 255
     a68:	7f ef       	ldi	r23, 0xFF	; 255
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <__fpcmp_parts_f+0xac>
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	cb 01       	movw	r24, r22
     a72:	1f 91       	pop	r17
     a74:	08 95       	ret

00000a76 <WatchDog_Init>:
#include "../../Service/BIT_MATH.h"
#include "../../Service/STD.h"
#include "WatchDog_Interface.h"

void WatchDog_Init(void)
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
	WDTCR_Register |= WatchDog_Prescaller;
     a7e:	a1 e4       	ldi	r26, 0x41	; 65
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e1 e4       	ldi	r30, 0x41	; 65
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	86 60       	ori	r24, 0x06	; 6
     a8a:	8c 93       	st	X, r24
}
     a8c:	cf 91       	pop	r28
     a8e:	df 91       	pop	r29
     a90:	08 95       	ret

00000a92 <WatchDog_Enable>:
void WatchDog_Enable(void)
{
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR_Register,WDE);
     a9a:	a1 e4       	ldi	r26, 0x41	; 65
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e1 e4       	ldi	r30, 0x41	; 65
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	8c 93       	st	X, r24
}
     aa8:	cf 91       	pop	r28
     aaa:	df 91       	pop	r29
     aac:	08 95       	ret

00000aae <WatchDog_TurnOff>:
void WatchDog_TurnOff(void)
{
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	0f 92       	push	r0
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	u8 clearant = 0;
     ab8:	19 82       	std	Y+1, r1	; 0x01
	clearant = clearant | WatchDog_Prescaller;
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	86 60       	ori	r24, 0x06	; 6
     abe:	89 83       	std	Y+1, r24	; 0x01
	WDTCR_Register &= clearant;
     ac0:	a1 e4       	ldi	r26, 0x41	; 65
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e1 e4       	ldi	r30, 0x41	; 65
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	90 81       	ld	r25, Z
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	89 23       	and	r24, r25
     ace:	8c 93       	st	X, r24
}
     ad0:	0f 90       	pop	r0
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <UART_Init>:
#include "../../Service/STD.h"
#include "UART_Interface.h"
#include "../DIO/DIO_interface.h"

void UART_Init(u16 baud)
{
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	00 d0       	rcall	.+0      	; 0xade <UART_Init+0x6>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
	/*Set Baud Rate*/
	UBRRH_Register = (u8)(baud>>8);
     ae6:	e0 e4       	ldi	r30, 0x40	; 64
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	89 2f       	mov	r24, r25
     af0:	99 27       	eor	r25, r25
     af2:	80 83       	st	Z, r24
	UBRRL_Register = (u8)baud;
     af4:	e9 e2       	ldi	r30, 0x29	; 41
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	80 83       	st	Z, r24
	/*Enable reciever & transmitter*/
	UCSRB_Register = (1<<RXEN)|(1<<TXEN);
     afc:	ea e2       	ldi	r30, 0x2A	; 42
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	88 e1       	ldi	r24, 0x18	; 24
     b02:	80 83       	st	Z, r24
	/*Set frame format: 8data, 2stop bit*/
	UCSRC_Register = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     b04:	e0 e4       	ldi	r30, 0x40	; 64
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	8e e8       	ldi	r24, 0x8E	; 142
     b0a:	80 83       	st	Z, r24
}
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	cf 91       	pop	r28
     b12:	df 91       	pop	r29
     b14:	08 95       	ret

00000b16 <UART_Transmit>:

void UART_Transmit(u8 data )
{
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	0f 92       	push	r0
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA_Register & (1<<UDRE)) );
     b22:	eb e2       	ldi	r30, 0x2B	; 43
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	88 2f       	mov	r24, r24
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	80 72       	andi	r24, 0x20	; 32
     b2e:	90 70       	andi	r25, 0x00	; 0
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	b9 f3       	breq	.-18     	; 0xb22 <UART_Transmit+0xc>
	/* Put data into buffer, sends the data */
	UDR_Register = data;
     b34:	ec e2       	ldi	r30, 0x2C	; 44
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	80 83       	st	Z, r24
}
     b42:	0f 90       	pop	r0
     b44:	cf 91       	pop	r28
     b46:	df 91       	pop	r29
     b48:	08 95       	ret

00000b4a <UART_Receive>:

u8 UART_Receive( void )
{
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA_Register & (1<<RXC)) );
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 23       	and	r24, r24
     b5a:	dc f7       	brge	.-10     	; 0xb52 <UART_Receive+0x8>
	/* Get and return received data from buffer */
	return UDR_Register;
     b5c:	ec e2       	ldi	r30, 0x2C	; 44
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
}
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <TIMER0Normal_Init>:
#include "../../Service/STD.h"
#include "../DIO/DIO_interface.h"
#include "Timer_Interface.h"

void TIMER0Normal_Init(void)
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	0f 92       	push	r0
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
	//Set Mode
	CLR_BIT(TCCR0_Register,WGM00);
     b74:	a3 e5       	ldi	r26, 0x53	; 83
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e3 e5       	ldi	r30, 0x53	; 83
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	8f 7b       	andi	r24, 0xBF	; 191
     b80:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_Register,WGM01);
     b82:	a3 e5       	ldi	r26, 0x53	; 83
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e3 e5       	ldi	r30, 0x53	; 83
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	87 7f       	andi	r24, 0xF7	; 247
     b8e:	8c 93       	st	X, r24
	//Set Starting Value
	TCNT0_Register = Initial_Count;
     b90:	e2 e5       	ldi	r30, 0x52	; 82
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	10 82       	st	Z, r1
	//Enable Interrupt
	SET_BIT(TIMSK_Register,TOIE0);
     b96:	a9 e5       	ldi	r26, 0x59	; 89
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e9 e5       	ldi	r30, 0x59	; 89
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	81 60       	ori	r24, 0x01	; 1
     ba2:	8c 93       	st	X, r24
	//Set Prescaler
	TCCR0_Register = (TCCR0_Register & !7) | Timer_Prescaler;
     ba4:	e3 e5       	ldi	r30, 0x53	; 83
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	e3 e5       	ldi	r30, 0x53	; 83
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	80 83       	st	Z, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <TIMER0CTC_Init>:
	SET_BIT(TIFR_Register,TOV0);
	//Set Prescaler
	TCCR0_Register = (TCCR0_Register & 7) | Timer_Prescaler;
}*/
void TIMER0CTC_Init(void)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	//Set Mode
	CLR_BIT(TCCR0_Register,WGM00);
     bc4:	a3 e5       	ldi	r26, 0x53	; 83
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e3 e5       	ldi	r30, 0x53	; 83
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8f 7b       	andi	r24, 0xBF	; 191
     bd0:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register,WGM01);
     bd2:	a3 e5       	ldi	r26, 0x53	; 83
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e3 e5       	ldi	r30, 0x53	; 83
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	8c 93       	st	X, r24
	//Set Starting Value
	OCR0_Register = Compare_Count;
     be0:	ec e5       	ldi	r30, 0x5C	; 92
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	88 ec       	ldi	r24, 0xC8	; 200
     be6:	80 83       	st	Z, r24
	//Enable Interrupt
	SET_BIT(TIMSK_Register,OCIE0);
     be8:	a9 e5       	ldi	r26, 0x59	; 89
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e9 e5       	ldi	r30, 0x59	; 89
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	82 60       	ori	r24, 0x02	; 2
     bf4:	8c 93       	st	X, r24
	//Set Prescaler
	TCCR0_Register = (TCCR0_Register & !7) | Timer_Prescaler;
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	e3 e5       	ldi	r30, 0x53	; 83
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	80 83       	st	Z, r24
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TIMER0PwmFast_Init>:
void TIMER0PwmFast_Init(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	//Set Mode
	SET_BIT(TCCR0_Register,WGM00);
     c14:	a3 e5       	ldi	r26, 0x53	; 83
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e3 e5       	ldi	r30, 0x53	; 83
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 64       	ori	r24, 0x40	; 64
     c20:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register,WGM01);
     c22:	a3 e5       	ldi	r26, 0x53	; 83
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e3 e5       	ldi	r30, 0x53	; 83
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	8c 93       	st	X, r24
	//Set Starting Value
	TCNT0_Register = 0;
     c30:	e2 e5       	ldi	r30, 0x52	; 82
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	10 82       	st	Z, r1
	//Enable Interrupt
	SET_BIT(TIMSK_Register,OCIE0);
     c36:	a9 e5       	ldi	r26, 0x59	; 89
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e9 e5       	ldi	r30, 0x59	; 89
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	8c 93       	st	X, r24
	SET_BIT(TIMSK_Register,TOIE0);
     c44:	a9 e5       	ldi	r26, 0x59	; 89
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e9 e5       	ldi	r30, 0x59	; 89
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <TIMER0PwmFast_Duty>:

void TIMER0PwmFast_Duty(f32 Duty)
{
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <TIMER0PwmFast_Duty+0xa>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <TIMER0PwmFast_Duty+0xc>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	69 83       	std	Y+1, r22	; 0x01
     c6a:	7a 83       	std	Y+2, r23	; 0x02
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	9c 83       	std	Y+4, r25	; 0x04
	OCR0_Register = (u8)(Duty * 256 -1);
     c70:	0c e5       	ldi	r16, 0x5C	; 92
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	69 81       	ldd	r22, Y+1	; 0x01
     c76:	7a 81       	ldd	r23, Y+2	; 0x02
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e8       	ldi	r20, 0x80	; 128
     c82:	53 e4       	ldi	r21, 0x43	; 67
     c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e8       	ldi	r20, 0x80	; 128
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	80 83       	st	Z, r24
	//Set Prescaler
	TCCR0_Register = (TCCR0_Register & 0b11111000) | Timer_Prescaler;
     cb0:	a3 e5       	ldi	r26, 0x53	; 83
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e3 e5       	ldi	r30, 0x53	; 83
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	88 7f       	andi	r24, 0xF8	; 248
     cbc:	83 60       	ori	r24, 0x03	; 3
     cbe:	8c 93       	st	X, r24
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <__vector_10>:

void __vector_10(void)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	DIO_TogPinValue(PORTA,PIN0);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_TogPinValue>
}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <__vector_11>:
void __vector_11(void)
{
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	6f 93       	push	r22
     d3e:	7f 93       	push	r23
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	DIO_TogPinValue(PORTA,PIN0);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_TogPinValue>
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <SPI_MasterInit>:
#include "../../Service/STD.h"
#include "../DIO/DIO_interface.h"
#include "SPI_Interface.h"

void SPI_MasterInit(void)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	//set pins
	DIO_SetPinDirection(PORTB,MOSI,PIN_OUTPUT);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	65 e0       	ldi	r22, 0x05	; 5
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,MISO,PIN_INPUT);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	66 e0       	ldi	r22, 0x06	; 6
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,SS,PIN_OUTPUT);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	64 e0       	ldi	r22, 0x04	; 4
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,SCK,PIN_OUTPUT);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	67 e0       	ldi	r22, 0x07	; 7
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	//set ss high
	DIO_SetPinValue(PORTB,SS,PIN_HIGH);
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	64 e0       	ldi	r22, 0x04	; 4
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
	//Select master
	SET_BIT(SPCR_Register,SPE);
     dbc:	ad e2       	ldi	r26, 0x2D	; 45
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	ed e2       	ldi	r30, 0x2D	; 45
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 64       	ori	r24, 0x40	; 64
     dc8:	8c 93       	st	X, r24
	SET_BIT(SPCR_Register,MSTR);
     dca:	ad e2       	ldi	r26, 0x2D	; 45
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ed e2       	ldi	r30, 0x2D	; 45
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 61       	ori	r24, 0x10	; 16
     dd6:	8c 93       	st	X, r24
	//Set Prescaller
	SPCR_Register = SET_BIT(SPCR_Register,SPR0);
     dd8:	2d e2       	ldi	r18, 0x2D	; 45
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	ad e2       	ldi	r26, 0x2D	; 45
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ed e2       	ldi	r30, 0x2D	; 45
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	81 60       	ori	r24, 0x01	; 1
     de8:	8c 93       	st	X, r24
     dea:	8c 91       	ld	r24, X
     dec:	f9 01       	movw	r30, r18
     dee:	80 83       	st	Z, r24

}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <SPI_MasterSend>:
void SPI_MasterSend(u8 data)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	0f 92       	push	r0
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	89 83       	std	Y+1, r24	; 0x01
	//set ss low
	DIO_SetPinValue(PORTB,SS,PIN_LOW);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	64 e0       	ldi	r22, 0x04	; 4
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
	//put data in data
	SPDR_Register = data;
     e0c:	ef e2       	ldi	r30, 0x2F	; 47
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	80 83       	st	Z, r24
	//wait till transmitiom
	while(!GET_BIT(SPSR_Register,SPIF));
     e14:	ee e2       	ldi	r30, 0x2E	; 46
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 23       	and	r24, r24
     e1c:	dc f7       	brge	.-10     	; 0xe14 <SPI_MasterSend+0x1e>
	//Flush Data
	data = SPDR_Register;
     e1e:	ef e2       	ldi	r30, 0x2F	; 47
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	89 83       	std	Y+1, r24	; 0x01
	//set ss high
	DIO_SetPinValue(PORTB,SS,PIN_HIGH);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	64 e0       	ldi	r22, 0x04	; 4
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <SPI_MasterRecieve>:
u8 SPI_MasterRecieve(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	SPDR_Register = 0XFF;
     e40:	ef e2       	ldi	r30, 0x2F	; 47
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_Register,SPIF));
     e48:	ee e2       	ldi	r30, 0x2E	; 46
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 23       	and	r24, r24
     e50:	dc f7       	brge	.-10     	; 0xe48 <SPI_MasterRecieve+0x10>
	return SPDR_Register;
     e52:	ef e2       	ldi	r30, 0x2F	; 47
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <SPI_SlaveInit>:
void SPI_SlaveInit(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	//set pins
	DIO_SetPinDirection(PORTB,MOSI,PIN_INPUT);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	65 e0       	ldi	r22, 0x05	; 5
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,MISO,PIN_OUTPUT);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	66 e0       	ldi	r22, 0x06	; 6
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,SS,PIN_INPUT);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	64 e0       	ldi	r22, 0x04	; 4
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,SCK,PIN_INPUT);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	67 e0       	ldi	r22, 0x07	; 7
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	//Enable SPI
	SET_BIT(SPCR_Register,SPE);
     e8e:	ad e2       	ldi	r26, 0x2D	; 45
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ed e2       	ldi	r30, 0x2D	; 45
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	8c 93       	st	X, r24
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <SPI_SlaveSend>:
void SPI_SlaveSend(u8 data)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
	//Set output to pin messege master
	//DIO_SetPinValue(PORTB,PIN0,PIN_HIGH);
	//DIO_SetPinValue(PORTB,PIN0,PIN_HIGH);
	//put data in data
	SPDR_Register = data;
     eae:	ef e2       	ldi	r30, 0x2F	; 47
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	80 83       	st	Z, r24
	//wait till transmitiom
	while(!GET_BIT(SPSR_Register,SPIF));
     eb6:	ee e2       	ldi	r30, 0x2E	; 46
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 23       	and	r24, r24
     ebe:	dc f7       	brge	.-10     	; 0xeb6 <SPI_SlaveSend+0x14>
	//Flush Data
	data = SPDR_Register;
     ec0:	ef e2       	ldi	r30, 0x2F	; 47
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	89 83       	std	Y+1, r24	; 0x01
	//DIO_SetPinValue(PORTB,PIN0,PIN_LOW);

}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <SPI_SlaveRecieve>:
u8 SPI_SlaveRecieve(void)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	SPDR_Register = 0XFF;
     ed8:	ef e2       	ldi	r30, 0x2F	; 47
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_Register,SPIF));
     ee0:	ee e2       	ldi	r30, 0x2E	; 46
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	dc f7       	brge	.-10     	; 0xee0 <SPI_SlaveRecieve+0x10>
	return SPDR_Register;
     eea:	ef e2       	ldi	r30, 0x2F	; 47
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <I2C_Init>:
#include "../../Service/STD.h"
#include "../DIO/DIO_interface.h"
#include "I2C_Interface.h"

void I2C_Init(u8 address)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
	//Set Bit Rate
	TWBR_Register = 0;
     f02:	e0 e2       	ldi	r30, 0x20	; 32
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	10 82       	st	Z, r1
	//ClearStatus Register Prescaler 0
	TWSR_Register = 0;
     f08:	e1 e2       	ldi	r30, 0x21	; 33
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	10 82       	st	Z, r1
	//Set Address
	TWAR_Register = address;
     f0e:	e2 e2       	ldi	r30, 0x22	; 34
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
}
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <StartCondition>:

u8 StartCondition(void)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	//Send START condition
	TWCR_Register = (1<<TWINT)|(1<<TWSTA)| (1<<TWEN);
     f28:	e6 e5       	ldi	r30, 0x56	; 86
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	84 ea       	ldi	r24, 0xA4	; 164
     f2e:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	while (!(TWCR_Register & (1<<TWINT)));
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	dc f7       	brge	.-10     	; 0xf30 <StartCondition+0x12>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from START go to ERROR
	if ((TWSR_Register & 0xF8) != MR_START)
     f3a:	e1 e2       	ldi	r30, 0x21	; 33
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 7f       	andi	r24, 0xF8	; 248
     f46:	90 70       	andi	r25, 0x00	; 0
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	91 05       	cpc	r25, r1
     f4c:	19 f0       	breq	.+6      	; 0xf54 <StartCondition+0x36>
	{
		return START_ERROR;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <StartCondition+0x38>
	}
	return OK;
     f54:	19 82       	std	Y+1, r1	; 0x01
     f56:	89 81       	ldd	r24, Y+1	; 0x01
}
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <SendAddressW>:

u8 SendAddressW(u8 address)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <SendAddressW+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	89 83       	std	Y+1, r24	; 0x01
	//Load SLA_W into TWDR Register. Clear TWINT bit in TWCR to start transmission of address
	TWDR_Register = address + 0;
     f6c:	e3 e2       	ldi	r30, 0x23	; 35
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 83       	st	Z, r24
	TWCR_Register = (1<<TWINT) | (1<<TWEN);
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	84 e8       	ldi	r24, 0x84	; 132
     f7a:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
	while (!(TWCR_Register & (1<<TWINT)));
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	dc f7       	brge	.-10     	; 0xf7c <SendAddressW+0x1c>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_SLA_ACK go to ERROR
	if ((TWSR_Register & 0xF8) != MT_SLA_W_ACK )
     f86:	e1 e2       	ldi	r30, 0x21	; 33
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 7f       	andi	r24, 0xF8	; 248
     f92:	90 70       	andi	r25, 0x00	; 0
     f94:	88 31       	cpi	r24, 0x18	; 24
     f96:	91 05       	cpc	r25, r1
     f98:	19 f0       	breq	.+6      	; 0xfa0 <SendAddressW+0x40>
	{
		return SEND_ADDRESS_ERROR;
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <SendAddressW+0x42>
	}
	return OK;
     fa0:	1a 82       	std	Y+2, r1	; 0x02
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <SendAddressR>:

u8 SendAddressR(u8 address)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <SendAddressR+0x6>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
	//Load SLA_E into TWDR Register. Clear TWINT bit in TWCR to start transmission of address
	TWDR_Register = address + 1;
     fba:	e3 e2       	ldi	r30, 0x23	; 35
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	80 83       	st	Z, r24
	TWCR_Register = (1<<TWINT) | (1<<TWEN);
     fc4:	e6 e5       	ldi	r30, 0x56	; 86
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	84 e8       	ldi	r24, 0x84	; 132
     fca:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
	while (!(TWCR_Register & (1<<TWINT)));
     fcc:	e6 e5       	ldi	r30, 0x56	; 86
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	dc f7       	brge	.-10     	; 0xfcc <SendAddressR+0x1e>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_SLA_ACK go to ERROR
	if ((TWSR_Register & 0xF8) != MR_SLA_R_ACK )
     fd6:	e1 e2       	ldi	r30, 0x21	; 33
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	88 7f       	andi	r24, 0xF8	; 248
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	80 34       	cpi	r24, 0x40	; 64
     fe6:	91 05       	cpc	r25, r1
     fe8:	61 f0       	breq	.+24     	; 0x1002 <SendAddressR+0x54>
	{
		DIO_SetPortDirection(PORTA,TWSR_Register & 0xF8);
     fea:	e1 e2       	ldi	r30, 0x21	; 33
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	98 2f       	mov	r25, r24
     ff2:	98 7f       	andi	r25, 0xF8	; 248
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	69 2f       	mov	r22, r25
     ff8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_SetPortDirection>
		return SEND_ADDRESS_ERROR;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <SendAddressR+0x56>
	}
	return OK;
    1002:	1a 82       	std	Y+2, r1	; 0x02
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <SendData>:

u8 SendData(u8 data)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <SendData+0x6>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
	//Load DATA into TWDR Register. Clear TWINT bit in TWCR to start transmission of data
	TWDR_Register = data;
    101c:	e3 e2       	ldi	r30, 0x23	; 35
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	80 83       	st	Z, r24
	TWCR_Register = (1<<TWINT) | (1<<TWEN);
    1024:	e6 e5       	ldi	r30, 0x56	; 86
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	84 e8       	ldi	r24, 0x84	; 132
    102a:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received.
	while (!(TWCR_Register & (1<<TWINT)));
    102c:	e6 e5       	ldi	r30, 0x56	; 86
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 23       	and	r24, r24
    1034:	dc f7       	brge	.-10     	; 0x102c <SendData+0x1c>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_ACK go to ERROR
	if ((TWSR_Register & 0xF8) != MT_DATA_WRITE_ACK)
    1036:	e1 e2       	ldi	r30, 0x21	; 33
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	88 7f       	andi	r24, 0xF8	; 248
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	88 32       	cpi	r24, 0x28	; 40
    1046:	91 05       	cpc	r25, r1
    1048:	19 f0       	breq	.+6      	; 0x1050 <SendData+0x40>
	{
		return SEND_DATA_ERROR;
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <SendData+0x42>
	}
	return OK;
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <ReadDataACK>:

u8 ReadDataACK(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	//Load DATA into TWDR Register. Clear TWINT bit in TWCR to start transmission of data
	TWCR_Register = (1<<TWINT) | (1<<TWEN);
    1068:	e6 e5       	ldi	r30, 0x56	; 86
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	84 e8       	ldi	r24, 0x84	; 132
    106e:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received.
	while (!(TWCR_Register & (1<<TWINT)));
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	dc f7       	brge	.-10     	; 0x1070 <ReadDataACK+0x12>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_ACK go to ERROR
	if ((TWSR_Register & 0xF8) != MT_DATA_WRITE_NACK)
    107a:	e1 e2       	ldi	r30, 0x21	; 33
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	88 7f       	andi	r24, 0xF8	; 248
    1086:	90 70       	andi	r25, 0x00	; 0
    1088:	80 33       	cpi	r24, 0x30	; 48
    108a:	91 05       	cpc	r25, r1
    108c:	19 f0       	breq	.+6      	; 0x1094 <ReadDataACK+0x36>
	{
		return SEND_DATA_ERROR;
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <ReadDataACK+0x38>
	}
	return OK;
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <ReadDataNACK>:

u8 ReadDataNACK(void)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	//Load DATA into TWDR Register. Clear TWINT bit in TWCR to start transmission of data
	TWCR_Register = (1<<TWINT) | (1<<TWEN);
    10aa:	e6 e5       	ldi	r30, 0x56	; 86
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	84 e8       	ldi	r24, 0x84	; 132
    10b0:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received.
	while (!(TWCR_Register & (1<<TWINT)));
    10b2:	e6 e5       	ldi	r30, 0x56	; 86
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 23       	and	r24, r24
    10ba:	dc f7       	brge	.-10     	; 0x10b2 <ReadDataNACK+0x12>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_ACK go to ERROR
	if ((TWSR_Register & 0xF8) != MR_DATA_READ_NACK)
    10bc:	e1 e2       	ldi	r30, 0x21	; 33
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	90 70       	andi	r25, 0x00	; 0
    10ca:	88 35       	cpi	r24, 0x58	; 88
    10cc:	91 05       	cpc	r25, r1
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <ReadDataNACK+0x36>
	{
		return SEND_DATA_ERROR;
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <ReadDataNACK+0x3e>
	}
	return TWDR_Register;
    10d6:	e3 e2       	ldi	r30, 0x23	; 35
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <RStartCondition>:
u8 RStartCondition(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	//Send START condition
	TWCR_Register = (1<<TWINT)|(1<<TWSTA)| (1<<TWEN);
    10f2:	e6 e5       	ldi	r30, 0x56	; 86
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	84 ea       	ldi	r24, 0xA4	; 164
    10f8:	80 83       	st	Z, r24
	//Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	while (!(TWCR_Register & (1<<TWINT)));
    10fa:	e6 e5       	ldi	r30, 0x56	; 86
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 23       	and	r24, r24
    1102:	dc f7       	brge	.-10     	; 0x10fa <RStartCondition+0x12>
	//Check value of TWI Status Register. Mask prescaler bits. If status different from START go to ERROR
	if ((TWSR_Register & 0xF8) != MT_REPEATED_START)
    1104:	e1 e2       	ldi	r30, 0x21	; 33
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	88 7f       	andi	r24, 0xF8	; 248
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	80 31       	cpi	r24, 0x10	; 16
    1114:	91 05       	cpc	r25, r1
    1116:	19 f0       	breq	.+6      	; 0x111e <RStartCondition+0x36>
	{
		return RSTART_ERROR;
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <RStartCondition+0x38>
	}
	return OK;
    111e:	19 82       	std	Y+1, r1	; 0x01
    1120:	89 81       	ldd	r24, Y+1	; 0x01
}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <StopCondition>:

void StopCondition(void)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	//Transmit STOP condition.
	TWCR_Register = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1132:	e6 e5       	ldi	r30, 0x56	; 86
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	84 e9       	ldi	r24, 0x94	; 148
    1138:	80 83       	st	Z, r24
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <I2C_MasterSendData>:

u8 I2C_MasterSendData(u8 address,u8 data)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <I2C_MasterSendData+0x6>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6a 83       	std	Y+2, r22	; 0x02
	if (StartCondition() != OK)
    1150:	0e 94 8f 07 	call	0xf1e	; 0xf1e <StartCondition>
    1154:	88 23       	and	r24, r24
    1156:	29 f0       	breq	.+10     	; 0x1162 <I2C_MasterSendData+0x22>
	{
		StopCondition();
    1158:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return START_ERROR;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	8b 83       	std	Y+3, r24	; 0x03
    1160:	17 c0       	rjmp	.+46     	; 0x1190 <I2C_MasterSendData+0x50>
	}
	if (SendAddressW(address) != OK)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	0e 94 b0 07 	call	0xf60	; 0xf60 <SendAddressW>
    1168:	88 23       	and	r24, r24
    116a:	29 f0       	breq	.+10     	; 0x1176 <I2C_MasterSendData+0x36>
	{
		StopCondition();
    116c:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return SEND_ADDRESS_ERROR;
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	8b 83       	std	Y+3, r24	; 0x03
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <I2C_MasterSendData+0x50>
	}
	if (SendData(data) != OK)
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	0e 94 08 08 	call	0x1010	; 0x1010 <SendData>
    117c:	88 23       	and	r24, r24
    117e:	29 f0       	breq	.+10     	; 0x118a <I2C_MasterSendData+0x4a>
	{
		StopCondition();
    1180:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return SEND_DATA_ERROR;
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <I2C_MasterSendData+0x50>
	}
	StopCondition();
    118a:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
	return OK;
    118e:	1b 82       	std	Y+3, r1	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <I2C_MasterRecieveData>:

u8 I2C_MasterRecieveData(u8 address,u8 *data)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <I2C_MasterRecieveData+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <I2C_MasterRecieveData+0x8>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	7c 83       	std	Y+4, r23	; 0x04
    11b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 DATA;
	if (StartCondition() != OK)
    11b2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <StartCondition>
    11b6:	88 23       	and	r24, r24
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <I2C_MasterRecieveData+0x26>
	{
		StopCondition();
    11ba:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return START_ERROR;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	1c c0       	rjmp	.+56     	; 0x11fc <I2C_MasterRecieveData+0x5e>
	}
	if (SendAddressR(address) != OK)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	0e 94 d7 07 	call	0xfae	; 0xfae <SendAddressR>
    11ca:	88 23       	and	r24, r24
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <I2C_MasterRecieveData+0x3a>
	{
		StopCondition();
    11ce:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return SEND_ADDRESS_ERROR;
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	12 c0       	rjmp	.+36     	; 0x11fc <I2C_MasterRecieveData+0x5e>
	}
	if ((DATA = ReadDataNACK()) != OK)
    11d8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <ReadDataNACK>
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 23       	and	r24, r24
    11e2:	29 f0       	breq	.+10     	; 0x11ee <I2C_MasterRecieveData+0x50>
	{
		StopCondition();
    11e4:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return Read_DATA_ERROR;
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <I2C_MasterRecieveData+0x5e>
	}
	*data = DATA;
    11ee:	eb 81       	ldd	r30, Y+3	; 0x03
    11f0:	fc 81       	ldd	r31, Y+4	; 0x04
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	80 83       	st	Z, r24
	StopCondition();
    11f6:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
	return OK;
    11fa:	1d 82       	std	Y+5, r1	; 0x05
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <I2C_MasterSendRecieve>:

u8 I2C_MasterSendRecieve(u8 address,u8 senddata,u8 * data)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <I2C_MasterSendRecieve+0x6>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <I2C_MasterSendRecieve+0x8>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <I2C_MasterSendRecieve+0xa>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	6b 83       	std	Y+3, r22	; 0x03
    1220:	5d 83       	std	Y+5, r21	; 0x05
    1222:	4c 83       	std	Y+4, r20	; 0x04
	u8 DATA;
	if (StartCondition() != OK)
    1224:	0e 94 8f 07 	call	0xf1e	; 0xf1e <StartCondition>
    1228:	88 23       	and	r24, r24
    122a:	29 f0       	breq	.+10     	; 0x1236 <I2C_MasterSendRecieve+0x28>
	{
		StopCondition();
    122c:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return START_ERROR;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	8e 83       	std	Y+6, r24	; 0x06
    1234:	39 c0       	rjmp	.+114    	; 0x12a8 <I2C_MasterSendRecieve+0x9a>
	}
	if (SendAddressW(address) != OK)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	0e 94 b0 07 	call	0xf60	; 0xf60 <SendAddressW>
    123c:	88 23       	and	r24, r24
    123e:	29 f0       	breq	.+10     	; 0x124a <I2C_MasterSendRecieve+0x3c>
	{
		StopCondition();
    1240:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return SEND_ADDRESS_ERROR;
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	8e 83       	std	Y+6, r24	; 0x06
    1248:	2f c0       	rjmp	.+94     	; 0x12a8 <I2C_MasterSendRecieve+0x9a>
	}
	if (SendData(senddata) != OK)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	0e 94 08 08 	call	0x1010	; 0x1010 <SendData>
    1250:	88 23       	and	r24, r24
    1252:	29 f0       	breq	.+10     	; 0x125e <I2C_MasterSendRecieve+0x50>
	{
		StopCondition();
    1254:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return SEND_DATA_ERROR;
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	8e 83       	std	Y+6, r24	; 0x06
    125c:	25 c0       	rjmp	.+74     	; 0x12a8 <I2C_MasterSendRecieve+0x9a>
	}
	if (RStartCondition() != OK)
    125e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <RStartCondition>
    1262:	88 23       	and	r24, r24
    1264:	29 f0       	breq	.+10     	; 0x1270 <I2C_MasterSendRecieve+0x62>
	{
		StopCondition();
    1266:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return RSTART_ERROR;
    126a:	84 e0       	ldi	r24, 0x04	; 4
    126c:	8e 83       	std	Y+6, r24	; 0x06
    126e:	1c c0       	rjmp	.+56     	; 0x12a8 <I2C_MasterSendRecieve+0x9a>
	}
	if (SendAddressR(address) != OK)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	0e 94 d7 07 	call	0xfae	; 0xfae <SendAddressR>
    1276:	88 23       	and	r24, r24
    1278:	29 f0       	breq	.+10     	; 0x1284 <I2C_MasterSendRecieve+0x76>
	{
		StopCondition();
    127a:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return SEND_ADDRESS_ERROR;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	8e 83       	std	Y+6, r24	; 0x06
    1282:	12 c0       	rjmp	.+36     	; 0x12a8 <I2C_MasterSendRecieve+0x9a>
	}
	if ((DATA = ReadDataNACK()) != OK)
    1284:	0e 94 50 08 	call	0x10a0	; 0x10a0 <ReadDataNACK>
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	88 23       	and	r24, r24
    128e:	29 f0       	breq	.+10     	; 0x129a <I2C_MasterSendRecieve+0x8c>
	{
		StopCondition();
    1290:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
		return Read_DATA_ERROR;
    1294:	85 e0       	ldi	r24, 0x05	; 5
    1296:	8e 83       	std	Y+6, r24	; 0x06
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <I2C_MasterSendRecieve+0x9a>
	}
	*data = DATA;
    129a:	ec 81       	ldd	r30, Y+4	; 0x04
    129c:	fd 81       	ldd	r31, Y+5	; 0x05
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	80 83       	st	Z, r24
	StopCondition();
    12a2:	0e 94 95 08 	call	0x112a	; 0x112a <StopCondition>
	return OK;
    12a6:	1e 82       	std	Y+6, r1	; 0x06
    12a8:	8e 81       	ldd	r24, Y+6	; 0x06

}
    12aa:	26 96       	adiw	r28, 0x06	; 6
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <I2C_SlaveInit>:

void I2C_SlaveInit(u8 address)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
	//Set adress
	TWAR_Register = address;
    12c8:	e2 e2       	ldi	r30, 0x22	; 34
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	80 83       	st	Z, r24
	TWCR_Register = 1<<TWEA | 1<<TWEN;
    12d0:	e6 e5       	ldi	r30, 0x56	; 86
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	84 e4       	ldi	r24, 0x44	; 68
    12d6:	80 83       	st	Z, r24
}
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <I2C_SlaveSendData>:

void I2C_SlaveSendData(u8 data)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
	TWCR_Register = 1<<TWEA | 1<<TWEN;
    12ec:	e6 e5       	ldi	r30, 0x56	; 86
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	84 e4       	ldi	r24, 0x44	; 68
    12f2:	80 83       	st	Z, r24
	while (!(TWCR_Register & (1<<TWINT)));
    12f4:	e6 e5       	ldi	r30, 0x56	; 86
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	dc f7       	brge	.-10     	; 0x12f4 <I2C_SlaveSendData+0x14>
	TWCR_Register = 1<<TWEA | 1<<TWEN;
    12fe:	e6 e5       	ldi	r30, 0x56	; 86
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	84 e4       	ldi	r24, 0x44	; 68
    1304:	80 83       	st	Z, r24
	while (!(TWCR_Register & (1<<TWINT)));
    1306:	e6 e5       	ldi	r30, 0x56	; 86
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 23       	and	r24, r24
    130e:	dc f7       	brge	.-10     	; 0x1306 <I2C_SlaveSendData+0x26>
	TWDR_Register = data;
    1310:	e3 e2       	ldi	r30, 0x23	; 35
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	80 83       	st	Z, r24
}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <I2C_SlaveRecieveData>:

u8 I2C_SlaveRecieveData(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	TWCR_Register |= (1<<TWINT);
    1328:	a6 e5       	ldi	r26, 0x56	; 86
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e6 e5       	ldi	r30, 0x56	; 86
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 68       	ori	r24, 0x80	; 128
    1334:	8c 93       	st	X, r24
	while (!(TWCR_Register & (1<<TWINT)));
    1336:	e6 e5       	ldi	r30, 0x56	; 86
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	88 23       	and	r24, r24
    133e:	dc f7       	brge	.-10     	; 0x1336 <I2C_SlaveRecieveData+0x16>
	TWCR_Register |= (1<<TWINT);
    1340:	a6 e5       	ldi	r26, 0x56	; 86
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e6 e5       	ldi	r30, 0x56	; 86
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 68       	ori	r24, 0x80	; 128
    134c:	8c 93       	st	X, r24
	while (!(TWCR_Register & (1<<TWINT)));
    134e:	e6 e5       	ldi	r30, 0x56	; 86
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	88 23       	and	r24, r24
    1356:	dc f7       	brge	.-10     	; 0x134e <I2C_SlaveRecieveData+0x2e>
	return TWDR_Register;
    1358:	e3 e2       	ldi	r30, 0x23	; 35
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <GInterupt_Enable>:
#include "../../Service/BIT_MATH.h"
#include "../../Service/STD.h"
#include "GInterrupt_Interface.h"

void GInterupt_Enable(void)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    136c:	af e5       	ldi	r26, 0x5F	; 95
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ef e5       	ldi	r30, 0x5F	; 95
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	80 68       	ori	r24, 0x80	; 128
    1378:	8c 93       	st	X, r24
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <GInterupt_Disable>:
void GInterupt_Disable(void)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1388:	af e5       	ldi	r26, 0x5F	; 95
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ef e5       	ldi	r30, 0x5F	; 95
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 77       	andi	r24, 0x7F	; 127
    1394:	8c 93       	st	X, r24
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <EXTI0_LowLevelInit>:
#include "EXTInterrupt_Interface.h"
#include "../DIO/DIO_interface.h"

/*Interrupt_0 Initialization & program*/
void EXTI0_LowLevelInit(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR_Register,ISC00);
    13a4:	a5 e5       	ldi	r26, 0x55	; 85
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e5 e5       	ldi	r30, 0x55	; 85
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8e 7f       	andi	r24, 0xFE	; 254
    13b0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_Register,ISC01);
    13b2:	a5 e5       	ldi	r26, 0x55	; 85
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e5       	ldi	r30, 0x55	; 85
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	8d 7f       	andi	r24, 0xFD	; 253
    13be:	8c 93       	st	X, r24
	EXTI0_Enable();
    13c0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <EXTI0_Enable>
	DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	62 e0       	ldi	r22, 0x02	; 2
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <EXTI0_FailingEdgeInit>:
void EXTI0_FailingEdgeInit(void)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR_Register,ISC00);
    13e6:	a5 e5       	ldi	r26, 0x55	; 85
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e5       	ldi	r30, 0x55	; 85
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8e 7f       	andi	r24, 0xFE	; 254
    13f2:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register,ISC01);
    13f4:	a5 e5       	ldi	r26, 0x55	; 85
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e5 e5       	ldi	r30, 0x55	; 85
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	8c 93       	st	X, r24
	EXTI0_Enable();
    1402:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <EXTI0_Enable>
	DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	62 e0       	ldi	r22, 0x02	; 2
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <EXTI0_RisingEdgeInit>:
void EXTI0_RisingEdgeInit(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_Register,ISC00);
    1428:	a5 e5       	ldi	r26, 0x55	; 85
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e5       	ldi	r30, 0x55	; 85
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register,ISC01);
    1436:	a5 e5       	ldi	r26, 0x55	; 85
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e5       	ldi	r30, 0x55	; 85
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8c 93       	st	X, r24
	EXTI0_Enable();
    1444:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <EXTI0_Enable>
	DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <EXTI0_AnyChangeInit>:
void EXTI0_AnyChangeInit(void)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_Register,ISC00);
    146a:	a5 e5       	ldi	r26, 0x55	; 85
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e5       	ldi	r30, 0x55	; 85
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_Register,ISC01);
    1478:	a5 e5       	ldi	r26, 0x55	; 85
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e5       	ldi	r30, 0x55	; 85
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8d 7f       	andi	r24, 0xFD	; 253
    1484:	8c 93       	st	X, r24
	EXTI0_Enable();
    1486:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <EXTI0_Enable>
	DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	62 e0       	ldi	r22, 0x02	; 2
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <EXTI0_Enable>:

void EXTI0_Enable(void)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_Register,INT0);
    14ac:	ab e5       	ldi	r26, 0x5B	; 91
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	eb e5       	ldi	r30, 0x5B	; 91
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	8c 93       	st	X, r24
}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <EXTI0_Disable>:

void EXTI0_Disable(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR_Register,INT0);
    14c8:	ab e5       	ldi	r26, 0x5B	; 91
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e5       	ldi	r30, 0x5B	; 91
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7b       	andi	r24, 0xBF	; 191
    14d4:	8c 93       	st	X, r24
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <EXTI0_ClearFlag>:

void EXTI0_ClearFlag(void)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_Register,INTF0);
    14e4:	ab e5       	ldi	r26, 0x5B	; 91
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e5       	ldi	r30, 0x5B	; 91
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 64       	ori	r24, 0x40	; 64
    14f0:	8c 93       	st	X, r24
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <EXTI1_LowLevelInit>:
/*Interrupt_1 Initialization & program*/
void EXTI1_LowLevelInit(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR_Register,ISC10);
    1500:	a5 e5       	ldi	r26, 0x55	; 85
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e5       	ldi	r30, 0x55	; 85
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8b 7f       	andi	r24, 0xFB	; 251
    150c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_Register,ISC11);
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	87 7f       	andi	r24, 0xF7	; 247
    151a:	8c 93       	st	X, r24
	EXTI1_Enable();
    151c:	0e 94 00 0b 	call	0x1600	; 0x1600 <EXTI1_Enable>
	DIO_SetPinDirection(PORTD,PIN3,PIN_INPUT);
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	63 e0       	ldi	r22, 0x03	; 3
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <EXTI1_FailingEdgeInit>:
void EXTI1_FailingEdgeInit(void)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR_Register,ISC10);
    1542:	a5 e5       	ldi	r26, 0x55	; 85
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e5       	ldi	r30, 0x55	; 85
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8b 7f       	andi	r24, 0xFB	; 251
    154e:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register,ISC11);
    1550:	a5 e5       	ldi	r26, 0x55	; 85
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e5 e5       	ldi	r30, 0x55	; 85
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	8c 93       	st	X, r24
	EXTI1_Enable();
    155e:	0e 94 00 0b 	call	0x1600	; 0x1600 <EXTI1_Enable>
	DIO_SetPinDirection(PORTD,PIN3,PIN_INPUT);
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	63 e0       	ldi	r22, 0x03	; 3
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <EXTI1_RisingEdgeInit>:
void EXTI1_RisingEdgeInit(void)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_Register,ISC10);
    1584:	a5 e5       	ldi	r26, 0x55	; 85
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e5       	ldi	r30, 0x55	; 85
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	84 60       	ori	r24, 0x04	; 4
    1590:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register,ISC11);
    1592:	a5 e5       	ldi	r26, 0x55	; 85
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e5       	ldi	r30, 0x55	; 85
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	8c 93       	st	X, r24
	EXTI1_Enable();
    15a0:	0e 94 00 0b 	call	0x1600	; 0x1600 <EXTI1_Enable>
	DIO_SetPinDirection(PORTD,PIN3,PIN_INPUT);
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	63 e0       	ldi	r22, 0x03	; 3
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	63 e0       	ldi	r22, 0x03	; 3
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <EXTI1_AnyChangeInit>:
void EXTI1_AnyChangeInit(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_Register,ISC10);
    15c6:	a5 e5       	ldi	r26, 0x55	; 85
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e5 e5       	ldi	r30, 0x55	; 85
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	84 60       	ori	r24, 0x04	; 4
    15d2:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_Register,ISC11);
    15d4:	a5 e5       	ldi	r26, 0x55	; 85
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e5 e5       	ldi	r30, 0x55	; 85
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	87 7f       	andi	r24, 0xF7	; 247
    15e0:	8c 93       	st	X, r24
	EXTI1_Enable();
    15e2:	0e 94 00 0b 	call	0x1600	; 0x1600 <EXTI1_Enable>
	DIO_SetPinDirection(PORTD,PIN3,PIN_INPUT);
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	63 e0       	ldi	r22, 0x03	; 3
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	63 e0       	ldi	r22, 0x03	; 3
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <EXTI1_Enable>:

void EXTI1_Enable(void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_Register,INT1);
    1608:	ab e5       	ldi	r26, 0x5B	; 91
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e5       	ldi	r30, 0x5B	; 91
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	8c 93       	st	X, r24
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <EXTI1_Disable>:

void EXTI1_Disable(void)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR_Register,INT1);
    1624:	ab e5       	ldi	r26, 0x5B	; 91
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	eb e5       	ldi	r30, 0x5B	; 91
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 77       	andi	r24, 0x7F	; 127
    1630:	8c 93       	st	X, r24
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <EXTI1_ClearFlag>:

void EXTI1_ClearFlag(void)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_Register,INTF1);
    1640:	ab e5       	ldi	r26, 0x5B	; 91
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	eb e5       	ldi	r30, 0x5B	; 91
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 68       	ori	r24, 0x80	; 128
    164c:	8c 93       	st	X, r24
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <EXTI2_FailingEdgeInit>:

/*Interrupt_2 Initialization & program*/
void EXTI2_FailingEdgeInit(void)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCSR_Register,ISC2);
    165c:	a4 e5       	ldi	r26, 0x54	; 84
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e4 e5       	ldi	r30, 0x54	; 84
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	8f 7b       	andi	r24, 0xBF	; 191
    1668:	8c 93       	st	X, r24
	EXTI2_Enable();
    166a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <EXTI2_Enable>
	DIO_SetPinDirection(PORTB,PIN2,PIN_INPUT);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB,PIN2,PIN_HIGH);
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <EXTI2_RisingEdgeInit>:
void EXTI2_RisingEdgeInit(void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCSR_Register,ISC2);
    1690:	a4 e5       	ldi	r26, 0x54	; 84
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e4 e5       	ldi	r30, 0x54	; 84
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 64       	ori	r24, 0x40	; 64
    169c:	8c 93       	st	X, r24
	EXTI2_Enable();
    169e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <EXTI2_Enable>
	DIO_SetPinDirection(PORTB,PIN2,PIN_INPUT);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	62 e0       	ldi	r22, 0x02	; 2
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB,PIN2,PIN_HIGH);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <EXTI2_Enable>:
void EXTI2_Enable(void)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_Register,INT2);
    16c4:	ab e5       	ldi	r26, 0x5B	; 91
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e5       	ldi	r30, 0x5B	; 91
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 62       	ori	r24, 0x20	; 32
    16d0:	8c 93       	st	X, r24
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <EXTI2_Disable>:

void EXTI2_Disable(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR_Register,INT2);
    16e0:	ab e5       	ldi	r26, 0x5B	; 91
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e5       	ldi	r30, 0x5B	; 91
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7d       	andi	r24, 0xDF	; 223
    16ec:	8c 93       	st	X, r24
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <EXTI2_ClearFlag>:

void EXTI2_ClearFlag(void)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_Register,INTF2);
    16fc:	ab e5       	ldi	r26, 0x5B	; 91
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	eb e5       	ldi	r30, 0x5B	; 91
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	80 62       	ori	r24, 0x20	; 32
    1708:	8c 93       	st	X, r24
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <__vector_1>:

void __vector_1 (void)
{
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	DIO_TogPinValue(PORTA,PIN0);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_TogPinValue>
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	ff 91       	pop	r31
    1748:	ef 91       	pop	r30
    174a:	bf 91       	pop	r27
    174c:	af 91       	pop	r26
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	7f 91       	pop	r23
    1754:	6f 91       	pop	r22
    1756:	5f 91       	pop	r21
    1758:	4f 91       	pop	r20
    175a:	3f 91       	pop	r19
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <__vector_2>:

void __vector_2 (void)
{
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62

}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_3>:

void __vector_3 (void)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62

}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <DIO_SetPinDirection>:
#include "../../Service/BIT_MATH.h"
#include "../../Service/STD.h"
#include "DIO_interface.h"

void DIO_SetPinDirection(u8 PortCopy,u8 PinCopy,u8 PinDirCopy)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	29 97       	sbiw	r28, 0x09	; 9
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	6a 83       	std	Y+2, r22	; 0x02
    17c0:	4b 83       	std	Y+3, r20	; 0x03
	switch (PinDirCopy)
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	39 87       	std	Y+9, r19	; 0x09
    17ca:	28 87       	std	Y+8, r18	; 0x08
    17cc:	88 85       	ldd	r24, Y+8	; 0x08
    17ce:	99 85       	ldd	r25, Y+9	; 0x09
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <DIO_SetPinDirection+0x2e>
    17d4:	75 c0       	rjmp	.+234    	; 0x18c0 <DIO_SetPinDirection+0x118>
    17d6:	28 85       	ldd	r18, Y+8	; 0x08
    17d8:	39 85       	ldd	r19, Y+9	; 0x09
    17da:	21 30       	cpi	r18, 0x01	; 1
    17dc:	31 05       	cpc	r19, r1
    17de:	09 f0       	breq	.+2      	; 0x17e2 <DIO_SetPinDirection+0x3a>
    17e0:	e2 c0       	rjmp	.+452    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
	{
	case PIN_OUTPUT:
		switch (PortCopy)
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3f 83       	std	Y+7, r19	; 0x07
    17ea:	2e 83       	std	Y+6, r18	; 0x06
    17ec:	8e 81       	ldd	r24, Y+6	; 0x06
    17ee:	9f 81       	ldd	r25, Y+7	; 0x07
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	91 05       	cpc	r25, r1
    17f4:	49 f1       	breq	.+82     	; 0x1848 <DIO_SetPinDirection+0xa0>
    17f6:	2e 81       	ldd	r18, Y+6	; 0x06
    17f8:	3f 81       	ldd	r19, Y+7	; 0x07
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	2c f4       	brge	.+10     	; 0x180a <DIO_SetPinDirection+0x62>
    1800:	8e 81       	ldd	r24, Y+6	; 0x06
    1802:	9f 81       	ldd	r25, Y+7	; 0x07
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	61 f0       	breq	.+24     	; 0x1820 <DIO_SetPinDirection+0x78>
    1808:	ce c0       	rjmp	.+412    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
    180a:	2e 81       	ldd	r18, Y+6	; 0x06
    180c:	3f 81       	ldd	r19, Y+7	; 0x07
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	71 f1       	breq	.+92     	; 0x1870 <DIO_SetPinDirection+0xc8>
    1814:	8e 81       	ldd	r24, Y+6	; 0x06
    1816:	9f 81       	ldd	r25, Y+7	; 0x07
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	e9 f1       	breq	.+122    	; 0x1898 <DIO_SetPinDirection+0xf0>
    181e:	c3 c0       	rjmp	.+390    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		{
		case PORTA: SET_BIT(DDRA_Register,PinCopy);break;
    1820:	aa e3       	ldi	r26, 0x3A	; 58
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ea e3       	ldi	r30, 0x3A	; 58
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_SetPinDirection+0x96>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_SetPinDirection+0x92>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	af c0       	rjmp	.+350    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		case PORTB: SET_BIT(DDRB_Register,PinCopy);break;
    1848:	a7 e3       	ldi	r26, 0x37	; 55
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e7 e3       	ldi	r30, 0x37	; 55
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_SetPinDirection+0xbe>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_SetPinDirection+0xba>
    186a:	84 2b       	or	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	9b c0       	rjmp	.+310    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		case PORTC: SET_BIT(DDRC_Register,PinCopy);break;
    1870:	a4 e3       	ldi	r26, 0x34	; 52
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e4 e3       	ldi	r30, 0x34	; 52
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_SetPinDirection+0xe6>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_SetPinDirection+0xe2>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	87 c0       	rjmp	.+270    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		case PORTD: SET_BIT(DDRD_Register,PinCopy);break;
    1898:	a1 e3       	ldi	r26, 0x31	; 49
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e1 e3       	ldi	r30, 0x31	; 49
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_SetPinDirection+0x10e>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_SetPinDirection+0x10a>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	73 c0       	rjmp	.+230    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		}
		break;
	case PIN_INPUT:
		switch (PortCopy)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	3d 83       	std	Y+5, r19	; 0x05
    18c8:	2c 83       	std	Y+4, r18	; 0x04
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	91 05       	cpc	r25, r1
    18d2:	59 f1       	breq	.+86     	; 0x192a <DIO_SetPinDirection+0x182>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <DIO_SetPinDirection+0x140>
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f0       	breq	.+26     	; 0x1900 <DIO_SetPinDirection+0x158>
    18e6:	5f c0       	rjmp	.+190    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
    18e8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ea:	3d 81       	ldd	r19, Y+5	; 0x05
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	89 f1       	breq	.+98     	; 0x1954 <DIO_SetPinDirection+0x1ac>
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	83 30       	cpi	r24, 0x03	; 3
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <DIO_SetPinDirection+0x156>
    18fc:	40 c0       	rjmp	.+128    	; 0x197e <DIO_SetPinDirection+0x1d6>
    18fe:	53 c0       	rjmp	.+166    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		{
		case PORTA: CLR_BIT(DDRA_Register,PinCopy);break;
    1900:	aa e3       	ldi	r26, 0x3A	; 58
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ea e3       	ldi	r30, 0x3A	; 58
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_SetPinDirection+0x176>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_SetPinDirection+0x172>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	3e c0       	rjmp	.+124    	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		case PORTB: CLR_BIT(DDRB_Register,PinCopy);break;
    192a:	a7 e3       	ldi	r26, 0x37	; 55
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e7 e3       	ldi	r30, 0x37	; 55
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_SetPinDirection+0x1a0>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_SetPinDirection+0x19c>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	29 c0       	rjmp	.+82     	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		case PORTC: CLR_BIT(DDRC_Register,PinCopy);break;
    1954:	a4 e3       	ldi	r26, 0x34	; 52
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e4 e3       	ldi	r30, 0x34	; 52
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_SetPinDirection+0x1ca>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_SetPinDirection+0x1c6>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	8c 93       	st	X, r24
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <DIO_SetPinDirection+0x1fe>
		case PORTD: CLR_BIT(DDRD_Register,PinCopy);break;
    197e:	a1 e3       	ldi	r26, 0x31	; 49
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e1 e3       	ldi	r30, 0x31	; 49
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_SetPinDirection+0x1f4>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_SetPinDirection+0x1f0>
    19a0:	80 95       	com	r24
    19a2:	84 23       	and	r24, r20
    19a4:	8c 93       	st	X, r24
		}
		break;
	}
}
    19a6:	29 96       	adiw	r28, 0x09	; 9
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <DIO_SetPinValue>:
void DIO_SetPinValue(u8 PortCopy,u8 PinCopy,u8 PinValCopy)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	29 97       	sbiw	r28, 0x09	; 9
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	6a 83       	std	Y+2, r22	; 0x02
    19d0:	4b 83       	std	Y+3, r20	; 0x03
	switch (PinValCopy)
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	39 87       	std	Y+9, r19	; 0x09
    19da:	28 87       	std	Y+8, r18	; 0x08
    19dc:	88 85       	ldd	r24, Y+8	; 0x08
    19de:	99 85       	ldd	r25, Y+9	; 0x09
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <DIO_SetPinValue+0x2e>
    19e4:	75 c0       	rjmp	.+234    	; 0x1ad0 <DIO_SetPinValue+0x118>
    19e6:	28 85       	ldd	r18, Y+8	; 0x08
    19e8:	39 85       	ldd	r19, Y+9	; 0x09
    19ea:	21 30       	cpi	r18, 0x01	; 1
    19ec:	31 05       	cpc	r19, r1
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <DIO_SetPinValue+0x3a>
    19f0:	e2 c0       	rjmp	.+452    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
	{
	case PIN_HIGH:
		switch (PortCopy)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3f 83       	std	Y+7, r19	; 0x07
    19fa:	2e 83       	std	Y+6, r18	; 0x06
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	91 05       	cpc	r25, r1
    1a04:	49 f1       	breq	.+82     	; 0x1a58 <DIO_SetPinValue+0xa0>
    1a06:	2e 81       	ldd	r18, Y+6	; 0x06
    1a08:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <DIO_SetPinValue+0x62>
    1a10:	8e 81       	ldd	r24, Y+6	; 0x06
    1a12:	9f 81       	ldd	r25, Y+7	; 0x07
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	61 f0       	breq	.+24     	; 0x1a30 <DIO_SetPinValue+0x78>
    1a18:	ce c0       	rjmp	.+412    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
    1a1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	71 f1       	breq	.+92     	; 0x1a80 <DIO_SetPinValue+0xc8>
    1a24:	8e 81       	ldd	r24, Y+6	; 0x06
    1a26:	9f 81       	ldd	r25, Y+7	; 0x07
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	e9 f1       	breq	.+122    	; 0x1aa8 <DIO_SetPinValue+0xf0>
    1a2e:	c3 c0       	rjmp	.+390    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		{
		case PORTA: SET_BIT(PORTA_Register,PinCopy);break;
    1a30:	ab e3       	ldi	r26, 0x3B	; 59
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_SetPinValue+0x96>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_SetPinValue+0x92>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	af c0       	rjmp	.+350    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		case PORTB: SET_BIT(PORTB_Register,PinCopy);break;
    1a58:	a8 e3       	ldi	r26, 0x38	; 56
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e3       	ldi	r30, 0x38	; 56
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_SetPinValue+0xbe>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_SetPinValue+0xba>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	9b c0       	rjmp	.+310    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		case PORTC: SET_BIT(PORTC_Register,PinCopy);break;
    1a80:	a5 e3       	ldi	r26, 0x35	; 53
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e3       	ldi	r30, 0x35	; 53
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_SetPinValue+0xe6>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_SetPinValue+0xe2>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	87 c0       	rjmp	.+270    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		case PORTD: SET_BIT(PORTD_Register,PinCopy);break;
    1aa8:	a2 e3       	ldi	r26, 0x32	; 50
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_SetPinValue+0x10e>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_SetPinValue+0x10a>
    1aca:	84 2b       	or	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	73 c0       	rjmp	.+230    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		}
		break;
	case PIN_LOW:
		switch (PortCopy)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3d 83       	std	Y+5, r19	; 0x05
    1ad8:	2c 83       	std	Y+4, r18	; 0x04
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	59 f1       	breq	.+86     	; 0x1b3a <DIO_SetPinValue+0x182>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <DIO_SetPinValue+0x140>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	69 f0       	breq	.+26     	; 0x1b10 <DIO_SetPinValue+0x158>
    1af6:	5f c0       	rjmp	.+190    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	89 f1       	breq	.+98     	; 0x1b64 <DIO_SetPinValue+0x1ac>
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	9d 81       	ldd	r25, Y+5	; 0x05
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	91 05       	cpc	r25, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <DIO_SetPinValue+0x156>
    1b0c:	40 c0       	rjmp	.+128    	; 0x1b8e <DIO_SetPinValue+0x1d6>
    1b0e:	53 c0       	rjmp	.+166    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		{
		case PORTA: CLR_BIT(PORTA_Register,PinCopy);break;
    1b10:	ab e3       	ldi	r26, 0x3B	; 59
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	eb e3       	ldi	r30, 0x3B	; 59
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_SetPinValue+0x176>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_SetPinValue+0x172>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	3e c0       	rjmp	.+124    	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		case PORTB: CLR_BIT(PORTB_Register,PinCopy);break;
    1b3a:	a8 e3       	ldi	r26, 0x38	; 56
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_SetPinValue+0x1a0>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_SetPinValue+0x19c>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
    1b62:	29 c0       	rjmp	.+82     	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		case PORTC: CLR_BIT(PORTC_Register,PinCopy);break;
    1b64:	a5 e3       	ldi	r26, 0x35	; 53
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e5 e3       	ldi	r30, 0x35	; 53
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_SetPinValue+0x1ca>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_SetPinValue+0x1c6>
    1b86:	80 95       	com	r24
    1b88:	84 23       	and	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <DIO_SetPinValue+0x1fe>
		case PORTD: CLR_BIT(PORTD_Register,PinCopy);break;
    1b8e:	a2 e3       	ldi	r26, 0x32	; 50
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e2 e3       	ldi	r30, 0x32	; 50
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_SetPinValue+0x1f4>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <DIO_SetPinValue+0x1f0>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
		}
		break;
	}
}
    1bb6:	29 96       	adiw	r28, 0x09	; 9
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <DIO_TogPinValue>:
void DIO_TogPinValue(u8 PortCopy,u8 PinCopy)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <DIO_TogPinValue+0x6>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <DIO_TogPinValue+0x8>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortCopy)
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	3c 83       	std	Y+4, r19	; 0x04
    1be0:	2b 83       	std	Y+3, r18	; 0x03
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	91 05       	cpc	r25, r1
    1bea:	49 f1       	breq	.+82     	; 0x1c3e <DIO_TogPinValue+0x76>
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	22 30       	cpi	r18, 0x02	; 2
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <DIO_TogPinValue+0x38>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	61 f0       	breq	.+24     	; 0x1c16 <DIO_TogPinValue+0x4e>
    1bfe:	5a c0       	rjmp	.+180    	; 0x1cb4 <DIO_TogPinValue+0xec>
    1c00:	2b 81       	ldd	r18, Y+3	; 0x03
    1c02:	3c 81       	ldd	r19, Y+4	; 0x04
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	71 f1       	breq	.+92     	; 0x1c66 <DIO_TogPinValue+0x9e>
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	91 05       	cpc	r25, r1
    1c12:	e9 f1       	breq	.+122    	; 0x1c8e <DIO_TogPinValue+0xc6>
    1c14:	4f c0       	rjmp	.+158    	; 0x1cb4 <DIO_TogPinValue+0xec>
	{
	case PORTA: TOG_BIT(PORTA_Register,PinCopy);break;
    1c16:	ab e3       	ldi	r26, 0x3B	; 59
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	eb e3       	ldi	r30, 0x3B	; 59
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_TogPinValue+0x6c>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_TogPinValue+0x68>
    1c38:	84 27       	eor	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	3b c0       	rjmp	.+118    	; 0x1cb4 <DIO_TogPinValue+0xec>
	case PORTB: TOG_BIT(PORTB_Register,PinCopy);break;
    1c3e:	a8 e3       	ldi	r26, 0x38	; 56
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e8 e3       	ldi	r30, 0x38	; 56
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_TogPinValue+0x94>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_TogPinValue+0x90>
    1c60:	84 27       	eor	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	27 c0       	rjmp	.+78     	; 0x1cb4 <DIO_TogPinValue+0xec>
	case PORTC: TOG_BIT(PORTC_Register,PinCopy);break;
    1c66:	a5 e3       	ldi	r26, 0x35	; 53
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e5 e3       	ldi	r30, 0x35	; 53
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_TogPinValue+0xbc>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_TogPinValue+0xb8>
    1c88:	84 27       	eor	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	13 c0       	rjmp	.+38     	; 0x1cb4 <DIO_TogPinValue+0xec>
	case PORTD: TOG_BIT(PORTD_Register,PinCopy);break;
    1c8e:	a2 e3       	ldi	r26, 0x32	; 50
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e2 e3       	ldi	r30, 0x32	; 50
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_TogPinValue+0xe4>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_TogPinValue+0xe0>
    1cb0:	84 27       	eor	r24, r20
    1cb2:	8c 93       	st	X, r24
	}
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 PortCopy,u8 PinCopy)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <DIO_GetPinValue+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <DIO_GetPinValue+0x8>
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 BIT;
	switch (PortCopy)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3d 83       	std	Y+5, r19	; 0x05
    1cdc:	2c 83       	std	Y+4, r18	; 0x04
    1cde:	4c 81       	ldd	r20, Y+4	; 0x04
    1ce0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ce2:	41 30       	cpi	r20, 0x01	; 1
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	41 f1       	breq	.+80     	; 0x1d38 <DIO_GetPinValue+0x76>
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	91 05       	cpc	r25, r1
    1cf0:	34 f4       	brge	.+12     	; 0x1cfe <DIO_GetPinValue+0x3c>
    1cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf6:	21 15       	cp	r18, r1
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <DIO_GetPinValue+0x52>
    1cfc:	52 c0       	rjmp	.+164    	; 0x1da2 <DIO_GetPinValue+0xe0>
    1cfe:	4c 81       	ldd	r20, Y+4	; 0x04
    1d00:	5d 81       	ldd	r21, Y+5	; 0x05
    1d02:	42 30       	cpi	r20, 0x02	; 2
    1d04:	51 05       	cpc	r21, r1
    1d06:	51 f1       	breq	.+84     	; 0x1d5c <DIO_GetPinValue+0x9a>
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	91 05       	cpc	r25, r1
    1d10:	b9 f1       	breq	.+110    	; 0x1d80 <DIO_GetPinValue+0xbe>
    1d12:	47 c0       	rjmp	.+142    	; 0x1da2 <DIO_GetPinValue+0xe0>
	{
	case PORTA: BIT = GET_BIT(PINA_Register,PinCopy);break;
    1d14:	e9 e3       	ldi	r30, 0x39	; 57
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a9 01       	movw	r20, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_GetPinValue+0x6a>
    1d28:	55 95       	asr	r21
    1d2a:	47 95       	ror	r20
    1d2c:	8a 95       	dec	r24
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_GetPinValue+0x66>
    1d30:	ca 01       	movw	r24, r20
    1d32:	81 70       	andi	r24, 0x01	; 1
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	35 c0       	rjmp	.+106    	; 0x1da2 <DIO_GetPinValue+0xe0>
	case PORTB: BIT = GET_BIT(PINB_Register,PinCopy);break;
    1d38:	e6 e3       	ldi	r30, 0x36	; 54
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a9 01       	movw	r20, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_GetPinValue+0x8e>
    1d4c:	55 95       	asr	r21
    1d4e:	47 95       	ror	r20
    1d50:	8a 95       	dec	r24
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_GetPinValue+0x8a>
    1d54:	ca 01       	movw	r24, r20
    1d56:	81 70       	andi	r24, 0x01	; 1
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	23 c0       	rjmp	.+70     	; 0x1da2 <DIO_GetPinValue+0xe0>
	case PORTC: BIT = GET_BIT(PINC_Register,PinCopy);break;
    1d5c:	e3 e3       	ldi	r30, 0x33	; 51
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a9 01       	movw	r20, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_GetPinValue+0xb2>
    1d70:	55 95       	asr	r21
    1d72:	47 95       	ror	r20
    1d74:	8a 95       	dec	r24
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_GetPinValue+0xae>
    1d78:	ca 01       	movw	r24, r20
    1d7a:	81 70       	andi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	11 c0       	rjmp	.+34     	; 0x1da2 <DIO_GetPinValue+0xe0>
	case PORTD: BIT = GET_BIT(PIND_Register,PinCopy);break;
    1d80:	e0 e3       	ldi	r30, 0x30	; 48
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a9 01       	movw	r20, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_GetPinValue+0xd6>
    1d94:	55 95       	asr	r21
    1d96:	47 95       	ror	r20
    1d98:	8a 95       	dec	r24
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_GetPinValue+0xd2>
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	81 70       	andi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
	}
	return BIT;
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <DIO_SetPortDirection>:




void DIO_SetPortDirection(u8 PortCopy,u8 PortDirCopy)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <DIO_SetPortDirection+0x6>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_SetPortDirection+0x8>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	6a 83       	std	Y+2, r22	; 0x02

	switch (PortCopy)
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	3c 83       	std	Y+4, r19	; 0x04
    1dcc:	2b 83       	std	Y+3, r18	; 0x03
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	d1 f0       	breq	.+52     	; 0x1e0c <DIO_SetPortDirection+0x58>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	2c f4       	brge	.+10     	; 0x1dec <DIO_SetPortDirection+0x38>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 f0       	breq	.+24     	; 0x1e02 <DIO_SetPortDirection+0x4e>
    1dea:	1e c0       	rjmp	.+60     	; 0x1e28 <DIO_SetPortDirection+0x74>
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	3c 81       	ldd	r19, Y+4	; 0x04
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <DIO_SetPortDirection+0x62>
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	81 f0       	breq	.+32     	; 0x1e20 <DIO_SetPortDirection+0x6c>
    1e00:	13 c0       	rjmp	.+38     	; 0x1e28 <DIO_SetPortDirection+0x74>
	{
	case PORTA:DDRA_Register = PortDirCopy; break;
    1e02:	ea e3       	ldi	r30, 0x3A	; 58
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <DIO_SetPortDirection+0x74>
	case PORTB:DDRB_Register = PortDirCopy; break;
    1e0c:	e7 e3       	ldi	r30, 0x37	; 55
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	80 83       	st	Z, r24
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <DIO_SetPortDirection+0x74>
	case PORTC:DDRC_Register = PortDirCopy; break;
    1e16:	e4 e3       	ldi	r30, 0x34	; 52
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	80 83       	st	Z, r24
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <DIO_SetPortDirection+0x74>
	case PORTD:DDRD_Register = PortDirCopy; break;
    1e20:	e1 e3       	ldi	r30, 0x31	; 49
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	80 83       	st	Z, r24
	}
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <DIO_SetPortValue>:
void DIO_SetPortValue(u8 PortCopy,u8 PortValCopy)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <DIO_SetPortValue+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <DIO_SetPortValue+0x8>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortCopy)
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	91 05       	cpc	r25, r1
    1e58:	d1 f0       	breq	.+52     	; 0x1e8e <DIO_SetPortValue+0x58>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <DIO_SetPortValue+0x38>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	61 f0       	breq	.+24     	; 0x1e84 <DIO_SetPortValue+0x4e>
    1e6c:	1e c0       	rjmp	.+60     	; 0x1eaa <DIO_SetPortValue+0x74>
    1e6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e70:	3c 81       	ldd	r19, Y+4	; 0x04
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	81 f0       	breq	.+32     	; 0x1e98 <DIO_SetPortValue+0x62>
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	83 30       	cpi	r24, 0x03	; 3
    1e7e:	91 05       	cpc	r25, r1
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <DIO_SetPortValue+0x6c>
    1e82:	13 c0       	rjmp	.+38     	; 0x1eaa <DIO_SetPortValue+0x74>
	{
	case PORTA:PORTA_Register = PortValCopy; break;
    1e84:	eb e3       	ldi	r30, 0x3B	; 59
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
    1e8c:	0e c0       	rjmp	.+28     	; 0x1eaa <DIO_SetPortValue+0x74>
	case PORTB:PORTB_Register = PortValCopy; break;
    1e8e:	e8 e3       	ldi	r30, 0x38	; 56
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
    1e96:	09 c0       	rjmp	.+18     	; 0x1eaa <DIO_SetPortValue+0x74>
	case PORTC:PORTC_Register = PortValCopy; break;
    1e98:	e5 e3       	ldi	r30, 0x35	; 53
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	80 83       	st	Z, r24
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <DIO_SetPortValue+0x74>
	case PORTD:PORTD_Register = PortValCopy; break;
    1ea2:	e2 e3       	ldi	r30, 0x32	; 50
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	80 83       	st	Z, r24
	}

}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <DIO_TogPortValue>:
void DIO_TogPortValue(u8 PortCopy)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <DIO_TogPortValue+0x6>
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	switch (PortCopy)
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3b 83       	std	Y+3, r19	; 0x03
    1ece:	2a 83       	std	Y+2, r18	; 0x02
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	e9 f0       	breq	.+58     	; 0x1f14 <DIO_TogPortValue+0x5c>
    1eda:	2a 81       	ldd	r18, Y+2	; 0x02
    1edc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ede:	22 30       	cpi	r18, 0x02	; 2
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <DIO_TogPortValue+0x36>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	61 f0       	breq	.+24     	; 0x1f04 <DIO_TogPortValue+0x4c>
    1eec:	2a c0       	rjmp	.+84     	; 0x1f42 <DIO_TogPortValue+0x8a>
    1eee:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef2:	22 30       	cpi	r18, 0x02	; 2
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	b1 f0       	breq	.+44     	; 0x1f24 <DIO_TogPortValue+0x6c>
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	83 30       	cpi	r24, 0x03	; 3
    1efe:	91 05       	cpc	r25, r1
    1f00:	c9 f0       	breq	.+50     	; 0x1f34 <DIO_TogPortValue+0x7c>
    1f02:	1f c0       	rjmp	.+62     	; 0x1f42 <DIO_TogPortValue+0x8a>
	{
	case PORTA:PORTA_Register ^= 0xFF; break;
    1f04:	ab e3       	ldi	r26, 0x3B	; 59
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	eb e3       	ldi	r30, 0x3B	; 59
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 95       	com	r24
    1f10:	8c 93       	st	X, r24
    1f12:	17 c0       	rjmp	.+46     	; 0x1f42 <DIO_TogPortValue+0x8a>
	case PORTB:PORTB_Register ^= 0xFF; break;
    1f14:	a8 e3       	ldi	r26, 0x38	; 56
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e8 e3       	ldi	r30, 0x38	; 56
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 95       	com	r24
    1f20:	8c 93       	st	X, r24
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <DIO_TogPortValue+0x8a>
	case PORTC:PORTC_Register ^= 0xFF; break;
    1f24:	a5 e3       	ldi	r26, 0x35	; 53
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e3       	ldi	r30, 0x35	; 53
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	80 95       	com	r24
    1f30:	8c 93       	st	X, r24
    1f32:	07 c0       	rjmp	.+14     	; 0x1f42 <DIO_TogPortValue+0x8a>
	case PORTD:PORTD_Register ^= 0xFF; break;
    1f34:	a2 e3       	ldi	r26, 0x32	; 50
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e2 e3       	ldi	r30, 0x32	; 50
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 95       	com	r24
    1f40:	8c 93       	st	X, r24
	}
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 PortCopy)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <DIO_GetPortValue+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <DIO_GetPortValue+0x8>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	switch (PortCopy)
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	3c 83       	std	Y+4, r19	; 0x04
    1f64:	2b 83       	std	Y+3, r18	; 0x03
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	d1 f0       	breq	.+52     	; 0x1fa4 <DIO_GetPortValue+0x56>
    1f70:	2b 81       	ldd	r18, Y+3	; 0x03
    1f72:	3c 81       	ldd	r19, Y+4	; 0x04
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <DIO_GetPortValue+0x36>
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	61 f0       	breq	.+24     	; 0x1f9a <DIO_GetPortValue+0x4c>
    1f82:	1f c0       	rjmp	.+62     	; 0x1fc2 <DIO_GetPortValue+0x74>
    1f84:	2b 81       	ldd	r18, Y+3	; 0x03
    1f86:	3c 81       	ldd	r19, Y+4	; 0x04
    1f88:	22 30       	cpi	r18, 0x02	; 2
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	81 f0       	breq	.+32     	; 0x1fae <DIO_GetPortValue+0x60>
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	83 30       	cpi	r24, 0x03	; 3
    1f94:	91 05       	cpc	r25, r1
    1f96:	81 f0       	breq	.+32     	; 0x1fb8 <DIO_GetPortValue+0x6a>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <DIO_GetPortValue+0x74>
	{
	case PORTA:return(PINA_Register); break;
    1f9a:	e9 e3       	ldi	r30, 0x39	; 57
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	90 81       	ld	r25, Z
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	10 c0       	rjmp	.+32     	; 0x1fc4 <DIO_GetPortValue+0x76>
	case PORTB:return(PINB_Register); break;
    1fa4:	e6 e3       	ldi	r30, 0x36	; 54
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	20 81       	ld	r18, Z
    1faa:	2a 83       	std	Y+2, r18	; 0x02
    1fac:	0b c0       	rjmp	.+22     	; 0x1fc4 <DIO_GetPortValue+0x76>
	case PORTC:return(PINC_Register); break;
    1fae:	e3 e3       	ldi	r30, 0x33	; 51
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	30 81       	ld	r19, Z
    1fb4:	3a 83       	std	Y+2, r19	; 0x02
    1fb6:	06 c0       	rjmp	.+12     	; 0x1fc4 <DIO_GetPortValue+0x76>
	case PORTD:return(PIND_Register); break;
    1fb8:	e0 e3       	ldi	r30, 0x30	; 48
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <DIO_GetPortValue+0x76>
	}
	return 0;
    1fc2:	1a 82       	std	Y+2, r1	; 0x02
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <ADC_Init>:
#include "../../Service/STD.h"
#include "../DIO/DIO_interface.h"
#include "ADC_Interface.h"

void ADC_Init(void)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
	/*Make ADC Channels Inputs*/
	PORTA_Register = 0xFF;
    1fdc:	eb e3       	ldi	r30, 0x3B	; 59
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	8f ef       	ldi	r24, 0xFF	; 255
    1fe2:	80 83       	st	Z, r24
	/*Select Reference Voltage*/
	SET_BIT(ADMUX_Register,REFS0);
    1fe4:	a7 e2       	ldi	r26, 0x27	; 39
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e7 e2       	ldi	r30, 0x27	; 39
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	80 64       	ori	r24, 0x40	; 64
    1ff0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_Register,REFS1);
    1ff2:	a7 e2       	ldi	r26, 0x27	; 39
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e7 e2       	ldi	r30, 0x27	; 39
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8f 77       	andi	r24, 0x7F	; 127
    1ffe:	8c 93       	st	X, r24
	/*Select Adjustment Right*/
	CLR_BIT(ADMUX_Register,ADLAR);
    2000:	a7 e2       	ldi	r26, 0x27	; 39
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e7 e2       	ldi	r30, 0x27	; 39
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 7d       	andi	r24, 0xDF	; 223
    200c:	8c 93       	st	X, r24
	/*Turn On ADC*/
	SET_BIT(ADCSRA_Register,ADEN);
    200e:	a6 e2       	ldi	r26, 0x26	; 38
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e6 e2       	ldi	r30, 0x26	; 38
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	80 68       	ori	r24, 0x80	; 128
    201a:	8c 93       	st	X, r24
	/*Select Prescaler*/
	ADCSRA_Register |= PRESCALER_2;
    201c:	a6 e2       	ldi	r26, 0x26	; 38
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e6 e2       	ldi	r30, 0x26	; 38
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8c 93       	st	X, r24

}
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <ADC0_Read>:

u16 ADC0_Read(void)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	0f 92       	push	r0
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC0;
    2038:	a7 e2       	ldi	r26, 0x27	; 39
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e7 e2       	ldi	r30, 0x27	; 39
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	80 7e       	andi	r24, 0xE0	; 224
    2044:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    2046:	a6 e2       	ldi	r26, 0x26	; 38
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e6 e2       	ldi	r30, 0x26	; 38
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 64       	ori	r24, 0x40	; 64
    2052:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    2054:	e6 e2       	ldi	r30, 0x26	; 38
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	fc cf       	rjmp	.-8      	; 0x2054 <ADC0_Read+0x26>

0000205c <ADC1_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC1_Read(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	0f 92       	push	r0
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC1;
    2066:	a7 e2       	ldi	r26, 0x27	; 39
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e7 e2       	ldi	r30, 0x27	; 39
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	80 7e       	andi	r24, 0xE0	; 224
    2072:	81 60       	ori	r24, 0x01	; 1
    2074:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    2076:	a6 e2       	ldi	r26, 0x26	; 38
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e6 e2       	ldi	r30, 0x26	; 38
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	80 64       	ori	r24, 0x40	; 64
    2082:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    2084:	e6 e2       	ldi	r30, 0x26	; 38
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	fc cf       	rjmp	.-8      	; 0x2084 <ADC1_Read+0x28>

0000208c <ADC2_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC2_Read(void)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC2;
    2096:	a7 e2       	ldi	r26, 0x27	; 39
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e7 e2       	ldi	r30, 0x27	; 39
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 7e       	andi	r24, 0xE0	; 224
    20a2:	82 60       	ori	r24, 0x02	; 2
    20a4:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    20a6:	a6 e2       	ldi	r26, 0x26	; 38
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e6 e2       	ldi	r30, 0x26	; 38
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 64       	ori	r24, 0x40	; 64
    20b2:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    20b4:	e6 e2       	ldi	r30, 0x26	; 38
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	fc cf       	rjmp	.-8      	; 0x20b4 <ADC2_Read+0x28>

000020bc <ADC3_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC3_Read(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC3;
    20c6:	a7 e2       	ldi	r26, 0x27	; 39
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e7 e2       	ldi	r30, 0x27	; 39
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 7e       	andi	r24, 0xE0	; 224
    20d2:	83 60       	ori	r24, 0x03	; 3
    20d4:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    20d6:	a6 e2       	ldi	r26, 0x26	; 38
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e6 e2       	ldi	r30, 0x26	; 38
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 64       	ori	r24, 0x40	; 64
    20e2:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    20e4:	e6 e2       	ldi	r30, 0x26	; 38
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	fc cf       	rjmp	.-8      	; 0x20e4 <ADC3_Read+0x28>

000020ec <ADC4_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC4_Read(void)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC4;
    20f6:	a7 e2       	ldi	r26, 0x27	; 39
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e7 e2       	ldi	r30, 0x27	; 39
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	80 7e       	andi	r24, 0xE0	; 224
    2102:	84 60       	ori	r24, 0x04	; 4
    2104:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    2106:	a6 e2       	ldi	r26, 0x26	; 38
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e6 e2       	ldi	r30, 0x26	; 38
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 64       	ori	r24, 0x40	; 64
    2112:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    2114:	e6 e2       	ldi	r30, 0x26	; 38
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	fc cf       	rjmp	.-8      	; 0x2114 <ADC4_Read+0x28>

0000211c <ADC5_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC5_Read(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC5;
    2126:	a7 e2       	ldi	r26, 0x27	; 39
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e7 e2       	ldi	r30, 0x27	; 39
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 7e       	andi	r24, 0xE0	; 224
    2132:	85 60       	ori	r24, 0x05	; 5
    2134:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    2136:	a6 e2       	ldi	r26, 0x26	; 38
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e6 e2       	ldi	r30, 0x26	; 38
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	80 64       	ori	r24, 0x40	; 64
    2142:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    2144:	e6 e2       	ldi	r30, 0x26	; 38
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	fc cf       	rjmp	.-8      	; 0x2144 <ADC5_Read+0x28>

0000214c <ADC6_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC6_Read(void)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC6;
    2156:	a7 e2       	ldi	r26, 0x27	; 39
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e7 e2       	ldi	r30, 0x27	; 39
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 7e       	andi	r24, 0xE0	; 224
    2162:	86 60       	ori	r24, 0x06	; 6
    2164:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    2166:	a6 e2       	ldi	r26, 0x26	; 38
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e6 e2       	ldi	r30, 0x26	; 38
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    2174:	e6 e2       	ldi	r30, 0x26	; 38
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	fc cf       	rjmp	.-8      	; 0x2174 <ADC6_Read+0x28>

0000217c <ADC7_Read>:
	SET_BIT(ADCSRA_Register,ADIF);
	/*return Reading*/
	return ADC_Register;
}
u16 ADC7_Read(void)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
	/*Select MUX*/
	ADMUX_Register = (ADMUX_Register & 0b11100000) | ADC7;
    2186:	a7 e2       	ldi	r26, 0x27	; 39
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e7 e2       	ldi	r30, 0x27	; 39
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 7e       	andi	r24, 0xE0	; 224
    2192:	87 60       	ori	r24, 0x07	; 7
    2194:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA_Register,ADSC);
    2196:	a6 e2       	ldi	r26, 0x26	; 38
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e6 e2       	ldi	r30, 0x26	; 38
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 64       	ori	r24, 0x40	; 64
    21a2:	8c 93       	st	X, r24
	/*Wait Till end*/
	while(~(GET_BIT(ADCSRA_Register,ADIF)));
    21a4:	e6 e2       	ldi	r30, 0x26	; 38
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	fc cf       	rjmp	.-8      	; 0x21a4 <ADC7_Read+0x28>

000021ac <ADC_TurnON>:
	/*return Reading*/
	return ADC_Register;
}

void ADC_TurnON(void)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_Register,ADIF);
    21b4:	a6 e2       	ldi	r26, 0x26	; 38
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e6 e2       	ldi	r30, 0x26	; 38
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	80 61       	ori	r24, 0x10	; 16
    21c0:	8c 93       	st	X, r24
}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <ADC_TurnOFF>:
void ADC_TurnOFF(void)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Register,ADIF);
    21d0:	a6 e2       	ldi	r26, 0x26	; 38
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e6 e2       	ldi	r30, 0x26	; 38
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8f 7e       	andi	r24, 0xEF	; 239
    21dc:	8c 93       	st	X, r24
}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <Segment7_Init>:
#include "Segment7_interface.h"

u8 NUM[10] = {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

void Segment7_Init(u8 PortCopy)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortDirection(PortCopy,PORT_OUTPUT);
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	6f ef       	ldi	r22, 0xFF	; 255
    21f4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_SetPortDirection>
}
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <Segment7_SetValue>:
void Segment7_SetValue(u8 PortCopy,u8 ValCopy)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <Segment7_SetValue+0x6>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_SetPortValue(PortCopy,ValCopy);
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	6a 81       	ldd	r22, Y+2	; 0x02
    2212:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <DIO_SetPortValue>
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <Segment7_DisplayON>:
void Segment7_DisplayON(u8 PortCopy)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	0f 92       	push	r0
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(PortCopy,PIN7,PIN_LOW);
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	67 e0       	ldi	r22, 0x07	; 7
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <Segment7_DisplayOFF>:
void Segment7_DisplayOFF(u8 PortCopy)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(PortCopy,PIN7,PIN_HIGH);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	67 e0       	ldi	r22, 0x07	; 7
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_SetPinValue>
}
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <main>:
#include "MCAL/SPI/SPI_Interface.h"
#include "MCAL/I2C/I2C_Interface.h"
#include "util/delay.h"

void main(void)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	I2C_SlaveInit(0x20);
    2266:	80 e2       	ldi	r24, 0x20	; 32
    2268:	0e 94 5e 09 	call	0x12bc	; 0x12bc <I2C_SlaveInit>
	DIO_SetPortDirection(PORTA,0xFF);
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	6f ef       	ldi	r22, 0xFF	; 255
    2270:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_SetPortDirection>
	while(1)
	{
		u8 data = 0;
    2274:	19 82       	std	Y+1, r1	; 0x01
		data = I2C_SlaveRecieveData();
    2276:	0e 94 90 09 	call	0x1320	; 0x1320 <I2C_SlaveRecieveData>
    227a:	89 83       	std	Y+1, r24	; 0x01
		DIO_SetPortValue(PORTA,data);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	69 81       	ldd	r22, Y+1	; 0x01
    2280:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <DIO_SetPortValue>
    2284:	f7 cf       	rjmp	.-18     	; 0x2274 <main+0x18>

00002286 <__prologue_saves__>:
    2286:	2f 92       	push	r2
    2288:	3f 92       	push	r3
    228a:	4f 92       	push	r4
    228c:	5f 92       	push	r5
    228e:	6f 92       	push	r6
    2290:	7f 92       	push	r7
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	ca 1b       	sub	r28, r26
    22b0:	db 0b       	sbc	r29, r27
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	09 94       	ijmp

000022be <__epilogue_restores__>:
    22be:	2a 88       	ldd	r2, Y+18	; 0x12
    22c0:	39 88       	ldd	r3, Y+17	; 0x11
    22c2:	48 88       	ldd	r4, Y+16	; 0x10
    22c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    22cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    22ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    22d0:	b9 84       	ldd	r11, Y+9	; 0x09
    22d2:	c8 84       	ldd	r12, Y+8	; 0x08
    22d4:	df 80       	ldd	r13, Y+7	; 0x07
    22d6:	ee 80       	ldd	r14, Y+6	; 0x06
    22d8:	fd 80       	ldd	r15, Y+5	; 0x05
    22da:	0c 81       	ldd	r16, Y+4	; 0x04
    22dc:	1b 81       	ldd	r17, Y+3	; 0x03
    22de:	aa 81       	ldd	r26, Y+2	; 0x02
    22e0:	b9 81       	ldd	r27, Y+1	; 0x01
    22e2:	ce 0f       	add	r28, r30
    22e4:	d1 1d       	adc	r29, r1
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	ed 01       	movw	r28, r26
    22f2:	08 95       	ret

000022f4 <_exit>:
    22f4:	f8 94       	cli

000022f6 <__stop_program>:
    22f6:	ff cf       	rjmp	.-2      	; 0x22f6 <__stop_program>
